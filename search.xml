<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ActiveMQ</title>
    <url>/2019/07/27/ActiveMQ/</url>
    <content><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSQueueProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            Destination destination = session.createQueue(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">            MessageProducer producer = session.createProducer(destination);</span><br><span class="line">            TextMessage message = session.createTextMessage(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">            producer.send(message);</span><br><span class="line">            session.commit();</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>You can also speicify null destination when creating producer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageProducer producer = session.createProducer(<span class="keyword">null</span>);</span><br><span class="line">...</span><br><span class="line">producer.send(someDestination, message);</span><br><span class="line">...</span><br><span class="line">producer.send(anotherDestination, message);</span><br></pre></td></tr></table></figure>

<p>It’s better to create Connection, Session, MessageProducer, MessageConsumer upfront and then reuse them. </p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSQueueReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            Destination destination = session.createQueue(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">            MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">            TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">            System.out.println(message.getText());</span><br><span class="line">            session.commit();</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSQueueListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            Destination destination = session.createQueue(<span class="string">&quot;myQueue&quot;</span>);</span><br><span class="line">            MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line"></span><br><span class="line">            MessageListener messageListener = <span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println( ((TextMessage)message).getText());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                consumer.setMessageListener(messageListener);</span><br><span class="line">                session.commit();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            session.close();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Message header</p>
</li>
<li><p>Message Body</p>
<ul>
<li>Text</li>
<li>Map</li>
<li>Bytes</li>
<li>Stream</li>
<li>Object</li>
</ul>
</li>
<li><p>Message properties</p>
</li>
</ul>
<ul>
<li>Topics<ul>
<li>Only subscribers who had an active subscription at the time the broker receives the message will get a copy of the message.</li>
</ul>
</li>
</ul>
<p>But activeMQ provides durable subscriber</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMSPersistentTopicConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.setClientID(<span class="string">&quot;Mic001&quot;</span>);</span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">// each producer or consumer can have individual session</span></span><br><span class="line">            Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            Topic destination = session.createTopic(<span class="string">&quot;myTopic&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// JMS specification dictates that the identification of S is done by a combination of the clientID and the durable subscriber name. </span></span><br><span class="line">            MessageConsumer consumer = session.createDurableSubscriber(destination, <span class="string">&quot;Mic001&quot;</span>); </span><br><span class="line">            TextMessage message = (TextMessage) consumer.receive();</span><br><span class="line">            System.out.println(message.getText());</span><br><span class="line">            session.commit();</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Deliver-Mode"><a href="#Deliver-Mode" class="headerlink" title="Deliver Mode"></a>Deliver Mode</h1><p>Durability of messages is defined by the MessagerProducer. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeliveryMode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NON_PERSISTENT = <span class="number">1</span>; <span class="comment">// stored only in memory</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERSISTENT = <span class="number">2</span>;  <span class="comment">// broker stores that message in a store on disk</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageProducer producer = ...;</span><br><span class="line">producer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br></pre></td></tr></table></figure>

<h1 id="Transaction-and-redelivery-in-JMS"><a href="#Transaction-and-redelivery-in-JMS" class="headerlink" title="Transaction and redelivery in JMS"></a>Transaction and redelivery in JMS</h1><p>In JMS, a transaction organizes a message or message group into an atomic processing unit; failure to deliver a message may result in redelivery of that message or message group.</p>
<ul>
<li><p>Acknowledgement options:</p>
<ul>
<li>Auto mode: once-only message delivery guarantee</li>
<li>Duplicates okay mode: at-least-onece message delivery guarantee (acknowledged lazily so might be delivered more than once)</li>
<li>Client mode: </li>
</ul>
</li>
<li><p>message processing phases</p>
<ul>
<li>consumer receives message</li>
<li>consumer processes message</li>
<li>message is acknowledge</li>
</ul>
</li>
<li><p>session mechansim</p>
<ul>
<li>transaction<br>*<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.commit();</span><br><span class="line">session.rollback();</span><br></pre></td></tr></table></figure></li>
<li>When operations are carried out on a transacted (or XA transacted) session, a transaction command is sent to the broker, with a unique transaction ID which is then followed by all the usual commands (send message, acknowledge message etc). When a commit() or rollback() is called on the Session, this command is sent to the broker for it to commit or rollback the transaction</li>
</ul>
</li>
<li><p>ActiveMQ supports sending messages to a broker in sync or async mode.</p>
<ul>
<li>non-persistent delivery mode is sent asynchronously</li>
<li>persistent delivery mode and non-transactional is sent synchronously</li>
<li>transactional is sent asynchronously</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MOM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache HttpClient</title>
    <url>/2019/12/03/Apache-HttpClient/</url>
    <content><![CDATA[<h1 id="HttpClient-example"><a href="#HttpClient-example" class="headerlink" title="HttpClient example"></a>HttpClient example</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpGet request = <span class="keyword">new</span> HttpGet(<span class="string">&quot;https://httpbin.org/get&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add request headers</span></span><br><span class="line">        request.addHeader(HttpHeaders.USER_AGENT, <span class="string">&quot;Googlebot&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">            CloseableHttpResponse response = httpClient.execute(request)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get HttpResponse Status</span></span><br><span class="line">            System.out.println(response.getProtocolVersion());              <span class="comment">// HTTP/1.1</span></span><br><span class="line">            System.out.println(response.getStatusLine().getStatusCode());   <span class="comment">// 200</span></span><br><span class="line">            System.out.println(response.getStatusLine().getReasonPhrase()); <span class="comment">// OK</span></span><br><span class="line">            System.out.println(response.getStatusLine().toString());        <span class="comment">// HTTP/1.1 200 OK</span></span><br><span class="line"></span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// return it as a String</span></span><br><span class="line">                String result = EntityUtils.toString(entity);</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="HttpClient-lt-CloseableHttpClient-lt-MinimalHttpClient"><a href="#HttpClient-lt-CloseableHttpClient-lt-MinimalHttpClient" class="headerlink" title="HttpClient &lt;- CloseableHttpClient &lt;- MinimalHttpClient"></a>HttpClient &lt;- CloseableHttpClient &lt;- MinimalHttpClient</h1><p>MinimalHttpClient contains the following fields:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpClientConnectionManager connManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MinimalClientExec requestExecutor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpParams params;</span><br></pre></td></tr></table></figure>

<ul>
<li>HttpParams params</li>
<li>MinimalClientExec requestExecutor</li>
</ul>
<p>It represents a complete execution process. It’s using decorator pattern.</p>
<ul>
<li>HttpClientConnectionManager connManager</li>
</ul>
<p>It maintains a connectio pool. Manage lifecycle of connections. </p>
<p>The status of <code>Connection</code> when created is idle and it’s managed by the connection pool. When the <code>Connection</code> is used, the first step is to check if it’s in <code>open</code> status. If not, it starts connecting. Based on which schema is used (http/https), socket (ssl or plain) is created.</p>
<p>Let’s take a look at the core method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> CloseableHttpResponse <span class="title">doExecute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpHost target,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> IOException, ClientProtocolException </span>&#123;</span><br><span class="line">    Args.notNull(target, <span class="string">&quot;Target host&quot;</span>);</span><br><span class="line">    Args.notNull(request, <span class="string">&quot;HTTP request&quot;</span>);</span><br><span class="line">    HttpExecutionAware execAware = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpExecutionAware) &#123;</span><br><span class="line">        execAware = (HttpExecutionAware) request;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> HttpRequestWrapper wrapper = HttpRequestWrapper.wrap(request);</span><br><span class="line">        <span class="keyword">final</span> HttpClientContext localcontext = HttpClientContext.adapt(</span><br><span class="line">            context != <span class="keyword">null</span> ? context : <span class="keyword">new</span> BasicHttpContext());</span><br><span class="line">        <span class="keyword">final</span> HttpRoute route = <span class="keyword">new</span> HttpRoute(target);</span><br><span class="line">        RequestConfig config = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Configurable) &#123;</span><br><span class="line">            config = ((Configurable) request).getConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line">            localcontext.setRequestConfig(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.requestExecutor.execute(route, wrapper, localcontext, execAware);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> HttpException httpException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientProtocolException(httpException);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>At last, it calls <code>requestExecutor.execute</code>. </p>
<p><code>requestExecutor</code> object is an instance of <code>MinimalClientExec</code> which implements <code>ClientExecChain</code>.</p>
<p>MinimalClientExec#execute:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CloseableHttpResponse <span class="title">execute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> HttpRoute route,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> HttpRequestWrapper request,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> HttpClientContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> HttpExecutionAware execAware)</span> <span class="keyword">throws</span> IOException, HttpException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ConnectionRequest connRequest = connManager.requestConnection(route, <span class="keyword">null</span>);  <span class="comment">// a request for a HttpClientConnection whose lifecycle is managed by a connection manager</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> RequestConfig config = context.getRequestConfig();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> HttpClientConnection managedConn;  <span class="comment">// send request and receive response</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> timeout = config.getConnectionRequestTimeout();</span><br><span class="line">            managedConn = connRequest.get(timeout &gt; <span class="number">0</span> ? timeout : <span class="number">0</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        context.setAttribute(HttpCoreContext.HTTP_TARGET_HOST, target);</span><br><span class="line">        context.setAttribute(HttpCoreContext.HTTP_REQUEST, request);</span><br><span class="line">        context.setAttribute(HttpCoreContext.HTTP_CONNECTION, managedConn);</span><br><span class="line">        context.setAttribute(HttpClientContext.HTTP_ROUTE, route);</span><br><span class="line">        <span class="comment">// store Key-value pair. share data across different logics</span></span><br><span class="line"></span><br><span class="line">        httpProcessor.process(request, context);</span><br><span class="line">        <span class="keyword">final</span> HttpResponse response = requestExecutor.execute(request, managedConn, context);</span><br><span class="line">        httpProcessor.process(response, context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// requestExecutor is an object of HttpRequestExecutor</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// httpProcessor is an object of ImmutableHttpProcessor. It processes http protocol. It includes multiple protocol interceptors:</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            private final HttpRequestInterceptor[] requestInterceptors;</span></span><br><span class="line"><span class="comment">            private final HttpResponseInterceptor[] responseInterceptors;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>The core part is how http request is sent out?</p>
<p>HttpRequestExecutor#execute:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpResponse response = doSendRequest(request, conn, context);</span><br><span class="line">            <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">                response = doReceiveResponse(request, conn, context);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br></pre></td></tr></table></figure>

<p>what is inside <code>doSendRequest</code>?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.sendRequestHeader(request);</span><br><span class="line">conn.sendRequestEntity((HttpEntityEnclosingRequest) request);</span><br></pre></td></tr></table></figure>

<p>As we can see, <code>HttpClientConnection</code> actually does the hard work, sending request and receiving response. <code>HttpRequestExecutor</code> encapsulates the process. </p>
<p>Thee main parts:</p>
<ul>
<li>manage requests (ConnectionManager)</li>
<li>execute requests (RequestExecutor)</li>
<li>process request (HttpProcessor)</li>
</ul>
<h1 id="HttpConnection-lt-HttpClientConnection"><a href="#HttpConnection-lt-HttpClientConnection" class="headerlink" title="HttpConnection &lt;- HttpClientConnection"></a>HttpConnection &lt;- HttpClientConnection</h1><p>The most commonly used implementation is <code>DefaultBHttpClientConnection</code></p>
<p>It has two fields:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpMessageParser&lt;HttpResponse&gt; responseParser;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpMessageWriter&lt;HttpRequest&gt; requestWriter;</span><br></pre></td></tr></table></figure>

<p>These two fieds are created based on <code>SessionOutputBuffer</code> and <code>SessionInputBuffer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.requestWriter = (requestWriterFactory != <span class="keyword">null</span> ? requestWriterFactory :</span><br><span class="line">    DefaultHttpRequestWriterFactory.INSTANCE).create(getSessionOutputBuffer());</span><br><span class="line"><span class="keyword">this</span>.responseParser = (responseParserFactory != <span class="keyword">null</span> ? responseParserFactory :</span><br><span class="line">    DefaultHttpResponseParserFactory.INSTANCE).create(getSessionInputBuffer(), constraints);</span><br></pre></td></tr></table></figure>


<h1 id="HttpClientConnectionManager-lt-BasicHttpClientConnectionManager"><a href="#HttpClientConnectionManager-lt-BasicHttpClientConnectionManager" class="headerlink" title="HttpClientConnectionManager &lt;- BasicHttpClientConnectionManager"></a>HttpClientConnectionManager &lt;- BasicHttpClientConnectionManager</h1><p>BasicHttpClientConnectionManager#connect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> HttpClientConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> HttpRoute route,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> <span class="keyword">int</span> connectTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       Args.notNull(conn, <span class="string">&quot;Connection&quot;</span>);</span><br><span class="line">       Args.notNull(route, <span class="string">&quot;HTTP route&quot;</span>);</span><br><span class="line">       Asserts.check(conn == <span class="keyword">this</span>.conn, <span class="string">&quot;Connection not obtained from this manager&quot;</span>);</span><br><span class="line">       <span class="keyword">final</span> HttpHost host;</span><br><span class="line">       <span class="keyword">if</span> (route.getProxyHost() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           host = route.getProxyHost();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           host = route.getTargetHost();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">final</span> InetSocketAddress localAddress = route.getLocalSocketAddress();</span><br><span class="line">       <span class="keyword">this</span>.connectionOperator.connect(<span class="keyword">this</span>.conn, host, localAddress,</span><br><span class="line">               connectTimeout, <span class="keyword">this</span>.socketConfig, context);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>As we can see from the last line, <code>connectionOperator</code> create a socket and bind it to <code>HttpClientConnection</code>.</p>
<h1 id="HttpClientConnectionManager-lt-PoolingHttpClientConnectionManager"><a href="#HttpClientConnectionManager-lt-PoolingHttpClientConnectionManager" class="headerlink" title="HttpClientConnectionManager &lt;- PoolingHttpClientConnectionManager"></a>HttpClientConnectionManager &lt;- PoolingHttpClientConnectionManager</h1><p>It maitains a connection pool (cpool). A pool usually has a factory (InternalConnectionFactory)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.pool = <span class="keyword">new</span> CPool(<span class="keyword">new</span> InternalConnectionFactory(</span><br><span class="line">               <span class="keyword">this</span>.configData, connFactory), <span class="number">2</span>, <span class="number">20</span>, timeToLive, timeUnit);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Concurrent Programming</title>
    <url>/2019/07/24/Concurrent-Programming/</url>
    <content><![CDATA[<h1 id="1-Basic-concepts"><a href="#1-Basic-concepts" class="headerlink" title="1. Basic concepts"></a>1. Basic concepts</h1><p>Processes run in separate memory spaces. Threads of the same process run in a shared memory spaces. They both are independent sequences of execution.</p>
<h2 id="Concurrency-vs-parallelism"><a href="#Concurrency-vs-parallelism" class="headerlink" title="Concurrency vs parallelism"></a>Concurrency vs parallelism</h2><img src="/2019/07/24/Concurrent-Programming/concurrency-vs-parallelism.jpeg" class="" title="concurrency vs parallelism">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">       ThreadInfo[] threadInfos =</span><br><span class="line">               threadMXBean.dumpAllThreads(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">       <span class="keyword">for</span> (ThreadInfo threadInfo: threadInfos) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;[&quot;</span> + threadInfo.getThreadId()</span><br><span class="line">           + <span class="string">&quot;]&quot;</span> + <span class="string">&quot; &quot;</span> + threadInfo.getThreadName());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1] main</span><br><span class="line">[2] Reference Handler</span><br><span class="line">[3] Finalizer</span><br><span class="line">[4] Signal Dispatcher</span><br><span class="line">[10] Common-Cleaner</span><br><span class="line">[11] Monitor Ctrl-Break</span><br></pre></td></tr></table></figure>

<h2 id="Three-ways-to-start-a-new-thread"><a href="#Three-ways-to-start-a-new-thread" class="headerlink" title="Three ways to start a new thread"></a>Three ways to start a new thread</h2><ul>
<li>extends Thread</li>
<li>implement Runnable</li>
<li>implement Callable</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Use Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Use Callable&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CallResult&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    UseRun useRun = <span class="keyword">new</span> UseRun();</span><br><span class="line">    <span class="keyword">new</span> Thread(useRun).start();</span><br><span class="line"></span><br><span class="line">    UseCall useCall = <span class="keyword">new</span> UseCall();</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(useCall);</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    System.out.println(futureTask.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stop-Thread"><a href="#Stop-Thread" class="headerlink" title="Stop Thread"></a>Stop Thread</h2><ul>
<li>interrupt()</li>
<li>isInterrupted()<br>Tests whether this thread has been interrupted.</li>
<li>static interrupted(): Tests whether the current thread has been interrupted.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UseThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread name &quot;</span> + threadName + <span class="string">&quot; is running&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;thread name intrrupted flag is &quot;</span> + isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread endThread = <span class="keyword">new</span> UseThread(<span class="string">&quot;endThread&quot;</span>);</span><br><span class="line">    endThread.start();</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    endThread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="share-variables-between-threads"><a href="#share-variables-between-threads" class="headerlink" title="share variables between threads"></a>share variables between threads</h2><ul>
<li>synchronized</li>
<li>volatile</li>
<li>ThreadLocal</li>
</ul>
<h2 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait/notify/notifyAll"></a>wait/notify/notifyAll</h2><p>wait side:</p>
<ol>
<li>obtain lock</li>
<li>check if condition is met in a loop, if not, wait</li>
<li>if yes, process</li>
</ol>
<p>notify side:</p>
<ol>
<li>obtain lock</li>
<li>update condition</li>
<li>notify all waiting threads</li>
</ol>
<p>wait with timeout:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> overtime = now + time;</span><br><span class="line"><span class="keyword">long</span> remain = time;</span><br><span class="line"><span class="keyword">while</span> (condition not met &amp;&amp; remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    wait(remain);</span><br><span class="line">    remain = overtime - now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork/Join"></a>Fork/Join</h2><p>A problem of size N. If N is smaller than n, divide N to k smaller size problem. Each subproblem is independent.</p>
<ol>
<li>pool = new ForkJoinPool();</li>
<li>MyTask myTask = new ForkJoinTask(); –&gt; </li>
<li>pool.invoke(myTask);</li>
<li>result = myTask.join()</li>
</ol>
<p>MyTask extends RecursiveTask/RecursiveAction/ForkJoinTask and override compute method:<br>if (condition is met) {<br>    do work;<br>    submit result;<br>} else {<br>    divide task to subtasks;<br>    invoke all subtasks;<br>    join all results;<br>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (toIndex - fromIndex &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = fromIndex; i &lt;= toIndex; i++) &#123;</span><br><span class="line">                count = count + src[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (fromIndex + toIndex) / <span class="number">2</span>;</span><br><span class="line">            SumTask left = <span class="keyword">new</span> SumTask(src, fromIndex, mid);</span><br><span class="line">            SumTask right = <span class="keyword">new</span> SumTask(src, mid + <span class="number">1</span>, toIndex);</span><br><span class="line">            invokeAll(left, right);</span><br><span class="line">            <span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Generic in Scala</title>
    <url>/2019/11/27/Generic-in-Scala/</url>
    <content><![CDATA[<h1 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br></pre></td></tr></table></figure>

<p>If Cat extends Animal, does List[Cat] extends List[Animal]?</p>
<ol>
<li>Answer: yes —&gt; COVARIANCE</li>
</ol>
<p>Define a covariant list:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CovariantList</span>[+<span class="type">A</span>]</span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">animal</span></span>: <span class="type">Animal</span> = <span class="keyword">new</span> <span class="type">Cat</span></span><br><span class="line"><span class="keyword">val</span> animalList: <span class="type">CovariantList</span>[<span class="type">Animal</span>] = <span class="keyword">new</span> <span class="type">CovariantList</span>[<span class="type">Cat</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Now, a question: animalList.add(new Dog). Is it ok???</p>
<p>Answer: Adding a dog into a list of cat returns a list of animal</p>
<p>So</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>[+<span class="type">A</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>[<span class="type">B</span> &gt;: <span class="type">A</span>](elem: <span class="type">B</span>): <span class="type">MyList</span>[<span class="type">B</span>] = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>Answer: no —&gt; INVARIANCE</li>
</ol>
<p>Define a invariant list:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvariantList</span>[<span class="type">A</span>]</span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">invariantAnimalList</span></span>: <span class="type">InvariantList</span>[<span class="type">Animal</span>] = <span class="keyword">new</span> <span class="type">InvariantList</span>[<span class="type">Cat</span>]  &lt;-- error</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Answer: no —&gt; CONTRAVARANCE</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContravariantList</span>[-<span class="type">A</span>]</span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">contravariantList</span></span>: <span class="type">ContravariantList</span>[<span class="type">Cat</span>] = <span class="keyword">new</span> <span class="type">ContravariantList</span>[<span class="type">Animal</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trainer</span>[-<span class="type">A</span>]</span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">trainer</span></span>: <span class="type">Trainer</span>[<span class="type">Cat</span>] = <span class="keyword">new</span> <span class="type">Trainer</span>[<span class="type">Animal</span>]</span><br></pre></td></tr></table></figure>

<p>A trainer of animal is also a trainer of cat.</p>
<h1 id="Bounded-Types"><a href="#Bounded-Types" class="headerlink" title="Bounded Types"></a>Bounded Types</h1><ol>
<li>Upper bound<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cage</span>[<span class="type">A</span> &lt;: <span class="type">Animal</span>](<span class="params">animal: <span class="type">A</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">cage</span> </span>= <span class="keyword">new</span> <span class="type">Cage</span>(<span class="keyword">new</span> <span class="type">Dog</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">cage</span> </span>= <span class="keyword">new</span> <span class="type">Cage</span>(<span class="keyword">new</span> <span class="type">Car</span>)  &lt;--- error !!</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>class cage only accepts type of A which is subtype of Animal</p>
<ol start="2">
<li>Lower bound</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cage</span>[<span class="type">A</span> &gt;: <span class="type">Animal</span>](<span class="params">animal: <span class="type">A</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>class cage only accepts type of A which is supertype of Animal</p>
]]></content>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle note</title>
    <url>/2019/10/19/Gradle-note/</url>
    <content><![CDATA[<h1 id="Gradle-Basics"><a href="#Gradle-Basics" class="headerlink" title="Gradle Basics"></a>Gradle Basics</h1><p>Projects and tasks are two fundamental concepts</p>
<p>Every gradle build is made up of one or more projects. A project represents either a thing to be built or a thing to be done.</p>
<p>Each project is made up of one or more tasks. A task represents some atomic piece of work to be performed. </p>
<a id="more"></a>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task intro(<span class="attr">dependsOn:</span> hello) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;I&#x27;m Gradle&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// via API (Each task is available as a property of the build script)</span></span><br><span class="line">intro.dependsOn hello</span><br><span class="line"></span><br><span class="line">intro.doLast &#123;</span><br><span class="line">    println <span class="string">&#x27;Second doLast&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dynamically create tasks</span></span><br><span class="line"><span class="number">4.</span>times &#123; counter -&gt;</span><br><span class="line">    task <span class="string">&quot;task$counter&quot;</span>  &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add extra property (project, task, source set can hold extra property)</span></span><br><span class="line">task myTask &#123;</span><br><span class="line">    ext.myProperty = <span class="string">&#x27;myValue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task printTaskProperties &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println myTask.myProperty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Working-with-Tasks"><a href="#Working-with-Tasks" class="headerlink" title="Working with Tasks"></a>Working with Tasks</h1><h2 id="Define-tasks"><a href="#Define-tasks" class="headerlink" title="Define tasks"></a>Define tasks</h2><p>Defining tasks using strings for task names</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task(<span class="string">&#x27;copy&#x27;</span>, <span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from(file(<span class="string">&#x27;srcDir&#x27;</span>))</span><br><span class="line">    into(buildDir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Defining tasks using the tasks container</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">tasks.create(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="string">&#x27;copy&#x27;</span>, Copy) &#123;</span><br><span class="line">    from(file(<span class="string">&#x27;srcDir&#x27;</span>))</span><br><span class="line">    into(buildDir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Defining tasks using a DSL specific syntax</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task(hello) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task(copy, <span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from(file(<span class="string">&#x27;srcDir&#x27;</span>))</span><br><span class="line">    into(buildDir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Locating-Tasks"><a href="#Locating-Tasks" class="headerlink" title="Locating Tasks"></a>Locating Tasks</h2><p>Accessing tasks using a DSL specific syntax:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello</span><br><span class="line">task copy(<span class="attr">type:</span> Copy)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Access tasks using Groovy dynamic properties on Project</span></span><br><span class="line"></span><br><span class="line">println hello.name</span><br><span class="line">println project.hello.name</span><br><span class="line"></span><br><span class="line">println copy.destinationDir</span><br><span class="line">println project.copy.destinationDir</span><br></pre></td></tr></table></figure>

<p>Accessing tasks via tasks collection:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello</span><br><span class="line">task copy(<span class="attr">type:</span> Copy)</span><br><span class="line"></span><br><span class="line">println tasks.hello.name</span><br><span class="line">println tasks.named(<span class="string">&#x27;hello&#x27;</span>).get().name</span><br><span class="line"></span><br><span class="line">println tasks.copy.destinationDir</span><br><span class="line">println tasks.named(<span class="string">&#x27;copy&#x27;</span>).get().destinationDir</span><br></pre></td></tr></table></figure>

<p>Accessing tasks by path:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">project(<span class="string">&#x27;:projectA&#x27;</span>) &#123;</span><br><span class="line">    task hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task hello</span><br><span class="line"></span><br><span class="line">println tasks.getByPath(<span class="string">&#x27;hello&#x27;</span>).path</span><br><span class="line">println tasks.getByPath(<span class="string">&#x27;:hello&#x27;</span>).path</span><br><span class="line">println tasks.getByPath(<span class="string">&#x27;projectA:hello&#x27;</span>).path</span><br><span class="line">println tasks.getByPath(<span class="string">&#x27;:projectA:hello&#x27;</span>).path</span><br></pre></td></tr></table></figure>


<h2 id="Configure-tasks"><a href="#Configure-tasks" class="headerlink" title="Configure tasks"></a>Configure tasks</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task myCopy(<span class="attr">type:</span> Copy)</span><br></pre></td></tr></table></figure>
<p>The name of this task is “myCopy”, but it is of type “Copy”. You can have multiple tasks of the same type, but with different names.</p>
<p>Configuring a task using the API:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Copy myCopy = tasks.getByName(<span class="string">&quot;myCopy&quot;</span>)</span><br><span class="line">myCopy.from <span class="string">&#x27;resources&#x27;</span></span><br><span class="line">myCopy.into <span class="string">&#x27;target&#x27;</span></span><br><span class="line">myCopy.include(<span class="string">&#x27;**/*.txt&#x27;</span>, <span class="string">&#x27;**/*.xml&#x27;</span>, <span class="string">&#x27;**/*.properties&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Configuring a task using a DSL specific syntax:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">myCopy &#123;</span><br><span class="line">   from <span class="string">&#x27;resources&#x27;</span></span><br><span class="line">   into <span class="string">&#x27;target&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">myCopy.include(<span class="string">&#x27;**/*.txt&#x27;</span>, <span class="string">&#x27;**/*.xml&#x27;</span>, <span class="string">&#x27;**/*.properties&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>You can also use a configuration block when you define a task. Defining a task with a configuration block:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task copy(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">   from <span class="string">&#x27;resources&#x27;</span></span><br><span class="line">   into <span class="string">&#x27;target&#x27;</span></span><br><span class="line">   include(<span class="string">&#x27;**/*.txt&#x27;</span>, <span class="string">&#x27;**/*.xml&#x27;</span>, <span class="string">&#x27;**/*.properties&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Passing-argumetns-to-a-task-constructor"><a href="#Passing-argumetns-to-a-task-constructor" class="headerlink" title="Passing argumetns to a task constructor"></a>Passing argumetns to a task constructor</h2><p>Prefer creating a task with constructor arguments using the TaskContainer</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTask</span> <span class="keyword">extends</span> <span class="title">DefaultTask</span> &#123;</span></span><br><span class="line">    <span class="keyword">final</span> String message</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> number</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    CustomTask(String message, <span class="keyword">int</span> number) &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message</span><br><span class="line">        <span class="built_in">this</span>.number = number</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.create(<span class="string">&#x27;myTask&#x27;</span>, CustomTask, <span class="string">&#x27;hello&#x27;</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">task myTask(<span class="attr">type:</span> CustomTask, <span class="attr">constructorArgs:</span> [<span class="string">&#x27;hello&#x27;</span>, <span class="number">42</span>])</span><br></pre></td></tr></table></figure>


<h2 id="Skipping-tasks"><a href="#Skipping-tasks" class="headerlink" title="Skipping tasks"></a>Skipping tasks</h2><p>Use a predicate</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">hello.onlyIf &#123; !project.hasProperty(<span class="string">&#x27;skipHello&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure>
<p>Skipping tasks with StopExecutionException</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile.doFirst &#123;</span><br><span class="line">    <span class="comment">// Here you would put arbitrary conditions in real life.</span></span><br><span class="line">    <span class="comment">// But this is used in an integration test so we want defined behavior.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> StopExecutionException() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Enabling and disabling tasks</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task disableMe &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;This should not be printed if the task is disabled.&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">disableMe.enabled = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Use timeout property. When a task reaches its timeout, its task execution thread is interrupted.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hangingTask() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        Thread.sleep(<span class="number">100000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    timeout = Duration.ofMillis(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Incremental-Build"><a href="#Incremental-Build" class="headerlink" title="Incremental Build"></a>Incremental Build</h2><p>Incremental build won’t work unless a task has at least one task output, although tasks usually have at least one input as well.</p>
<p>As a build author, you need to specify which are inputs and which are outputs. Also be careful of non-deterministic tasks that may generate different output for exactly the same inputs.</p>
<h2 id="External-dependencies-for-the-build-script"><a href="#External-dependencies-for-the-build-script" class="headerlink" title="External dependencies for the build script"></a>External dependencies for the build script</h2><p>If your build script needs to use external libraries, you can add them to the script’s classpath in the build script itself. You do this using the buildscript() method. The block passed to the buildscript() method configures a ScriptHandler instance</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="attr">group:</span> <span class="string">&#x27;commons-codec&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;commons-codec&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-script-API"><a href="#The-script-API" class="headerlink" title="The script API"></a>The script API</h2><p>When Gradle executes a Groovy build script (.gradle), it compiles the script into a class which implements Script. This means that all of the properties and methods declared by the Script interface are available in your script.</p>
<h1 id="Working-with-Plugin"><a href="#Working-with-Plugin" class="headerlink" title="Working with Plugin"></a>Working with Plugin</h1><p>Two types of plugins</p>
<ul>
<li>script plugin</li>
<li>binary plugin (classes that implement the Plugin interface)</li>
</ul>
<p>A plugin often starts out as a script plugin (because they are easy to write) and then, as the code becomes more valuable, it’s migrated to a binary plugin that can be easily tested and shared betwen multiple projects or organizations.</p>
<p>To use a plugin has two steps (resolving and applying). Applying a plugin means actually executing the plugin’s Plugin.apply(T) on the Project you want to enhance with the plugin.</p>
<h2 id="Script-Plugins"><a href="#Script-Plugins" class="headerlink" title="Script Plugins"></a>Script Plugins</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;other.gradle&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Binary-Plugins"><a href="#Binary-Plugins" class="headerlink" title="Binary Plugins"></a>Binary Plugins</h2><p>A plugin is simply any class that implements the Plugin interface. Non-core binary plugins need to be resolved before they can be applied. </p>
<ul>
<li>Including the plugin from the plugin portal or a custom repository using the plugins DSL</li>
<li>Including the plugin from an external jar defined as a buildscript dependency</li>
<li>Defining the plugin as a source file under the buildSrc directory in the project</li>
<li>Defining the plugin as an inline class declaration inside a build script.</li>
</ul>
<h2 id="Applying-plugins"><a href="#Applying-plugins" class="headerlink" title="Applying plugins"></a>Applying plugins</h2><p>The plugins DSL block configures an instance of PluginDependenciesSpec.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.jfrog.bintray&#x27;</span> version <span class="string">&#x27;0.4.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">from:</span> rootProject.file(<span class="string">&#x27;gradle/dependencies.gradle&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Applying-plugins-to-subprojects"><a href="#Applying-plugins-to-subprojects" class="headerlink" title="Applying plugins to subprojects"></a>Applying plugins to subprojects</h2><p>The default behaviour of the plugins{} block is to immediately <code>resolve</code> and <code>apply</code> the plugins. </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.gradle.sample.hello&#x27;</span> version <span class="string">&#x27;1.0.0&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">    id <span class="string">&#x27;org.gradle.sample.goodbye&#x27;</span> version <span class="string">&#x27;1.0.0&#x27;</span> apply <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.startsWith(<span class="string">&#x27;hello&#x27;</span>)) &#123;</span><br><span class="line">        apply <span class="attr">plugin:</span> <span class="string">&#x27;org.gradle.sample.hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Write-a-simple-plugin"><a href="#Write-a-simple-plugin" class="headerlink" title="Write a simple plugin"></a>Write a simple plugin</h2><p>There are several places where you can put the source for the plugin.</p>
<ul>
<li>Build script</li>
<li><code>buildSrc</code> project</li>
<li>Standalone project</li>
</ul>
<p>To create a Gradle plugin, you need to write a class that implements the Plugin interface. When the plugin is applied to a project, Gradle creates an instance of the plugin class and calls the instance’s Plugin.apply() method. The project object is passed as a parameter, which the plugin can use to configure the project however it needs to. </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println <span class="string">&#x27;Hello from the GreetingPlugin&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply the plugin</span></span><br><span class="line">apply <span class="attr">plugin:</span> GreetingPlugin</span><br></pre></td></tr></table></figure>

<h2 id="Make-the-plugin-confiugration"><a href="#Make-the-plugin-confiugration" class="headerlink" title="Make the plugin confiugration"></a>Make the plugin confiugration</h2><p>To make the plugin configurable, you need add an extension object (represents the configuration) to the ExtensionContainer.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPluginExtension</span> &#123;</span></span><br><span class="line">    String message</span><br><span class="line">    String greeter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="keyword">def</span> extension = project.extensions.create(<span class="string">&#x27;greeting&#x27;</span>, GreetingPluginExtension)</span><br><span class="line">        project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println <span class="string">&quot;$&#123;extension.message&#125; from $&#123;extension.greeter&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> GreetingPlugin</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the extension using a DSL block</span></span><br><span class="line">greeting &#123;</span><br><span class="line">    message = <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">    greeter = <span class="string">&#x27;Gradle&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Building-Java-project"><a href="#Building-Java-project" class="headerlink" title="Building Java project"></a>Building Java project</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">targetCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.2.1&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">project  </span><br><span class="line">    +build  </span><br><span class="line">    +src&#x2F;main&#x2F;java  </span><br><span class="line">    +src&#x2F;main&#x2F;resources  </span><br><span class="line">    +src&#x2F;test&#x2F;java  </span><br><span class="line">    +src&#x2F;test&#x2F;resources  </span><br></pre></td></tr></table></figure>

<p>java plugin adds some tasks. <code>gradle tasks</code></p>
<p>By applying the Java plugin, you get a whole host of features: compileJava, compileTestJava, test, jar, javadoc</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task show  &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println relativePath(compileJava.destinationDir)</span><br><span class="line">        println relativePath(processResources.destinationDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>You can change the destinationDir of compireJava.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">compileJava.destinationDir = file(<span class="string">&quot;$buildDir/output/classes&quot;</span>)</span><br><span class="line">task show  &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println relativePath(compileJava.destinationDir)</span><br><span class="line">        println relativePath(processResources.destinationDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>But compileJava is not the only task that needs to know destinationDir. Gradle has sourceSet</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">sourceSets.main.output.classesDir = file(<span class="string">&quot;$buildDir/output/classes&quot;</span>)</span><br><span class="line">task show &lt;&lt; &#123;</span><br><span class="line">    println relativePath(compileJava.destinationDir)</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="Source-Set"><a href="#Source-Set" class="headerlink" title="Source Set"></a>Source Set</h2><p>java plugin defines main source set and test source set. </p>
<p>Custom source dir</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">         java &#123;</span><br><span class="line">            srcDirs = [<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    test &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Changing-compiler-options"><a href="#Changing-compiler-options" class="headerlink" title="Changing compiler options"></a>Changing compiler options</h2><p>Most of the compiler options are accessible through the corresponding task, such as <code>compileJava</code> and <code>compileTestJava</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compileJava &#123;</span><br><span class="line">    options.incremental = <span class="keyword">true</span></span><br><span class="line">    options.fork = <span class="keyword">true</span></span><br><span class="line">    options.failOnError = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Build-Phases"><a href="#Build-Phases" class="headerlink" title="Build Phases"></a>Build Phases</h1><p>Initializaiton -&gt; Configuration -&gt; Execuiton</p>
<h1 id="Composite-build"><a href="#Composite-build" class="headerlink" title="Composite build"></a>Composite build</h1><p>A composite build is simply a build that includes other builds. In many ways a composite build is similar to a Gradle multi-project build, except that instead of including single projects, complete builds are included</p>
<p>Two concepts:</p>
<ul>
<li>composite build</li>
<li>included build</li>
</ul>
<p>A build that is included in a composite build is referred to, naturally enough, as an “included build”. Included builds do not share any configuration with the composite build, or the other included builds. Each included build is configured and executed in isolation.</p>
<p>Included builds interact with other builds via dependency substitution. If any build in the composite has a dependency that can be satisfied by the included build, then that dependency will be replaced by a project dependency on the included build.</p>
<h2 id="Defining-a-separate-composite-build"><a href="#Defining-a-separate-composite-build" class="headerlink" title="Defining a separate composite build"></a>Defining a separate composite build</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">rootProject.name = <span class="string">&#x27;adhoc&#x27;</span></span><br><span class="line"></span><br><span class="line">includeBuild <span class="string">&#x27;../my-app&#x27;</span></span><br><span class="line">includeBuild <span class="string">&#x27;../my-utils&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Best-Practice"><a href="#Best-Practice" class="headerlink" title="Best Practice"></a>Best Practice</h1><h2 id="Name-your-project"><a href="#Name-your-project" class="headerlink" title="Name your project"></a>Name your project</h2><p>In <code>seetings.gradle</code> file</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:api&#x27;</span>, <span class="string">&#x27;:impl&#x27;</span>, <span class="string">&#x27;:client&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Rename the project early in the kinematics (after that the names are read-only) </span></span><br><span class="line">rootProject.name = <span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">project(<span class="string">&#x27;:api&#x27;</span>).= <span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">project(<span class="string">&#x27;:impl&#x27;</span>).= <span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">project(<span class="string">&#x27;:client&#x27;</span>).= <span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure>

<p>After renaming a project, all references must be updated to accomodate the new name. For instance, the existing references “project(‘:impl’)” must now be replaced by “project(‘:XXX’)” </p>
<h2 id="Use-the-wrapper"><a href="#Use-the-wrapper" class="headerlink" title="Use the wrapper"></a>Use the wrapper</h2><p>Run <code>gradle wrapper</code> to generate two files:</p>
<ul>
<li><code>gradle/wrapper/gradle-wrapper.jar</code></li>
<li><code>gradle/wrapper/gradle-wrapper.properties</code></li>
<li><code>gradlew</code></li>
<li><code>gradlew.bat</code></li>
</ul>
<h2 id="Apply-DRY"><a href="#Apply-DRY" class="headerlink" title="Apply DRY"></a>Apply DRY</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> jerseyVersion = <span class="string">&#x27;1.19&#x27;</span></span><br><span class="line">  </span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// Note that we replaced the single quotes by double quotes to let Groovy evaluate the expression &quot;$&#123;jerseyVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.sun.jersey:jersey-core:$&#123;jerseyVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.sun.jersey:jersey-servlet:$&#123;jerseyVersion&#125;&quot;</span></span><br><span class="line">    compile <span class="string">&quot;com.sun.jersey:jersey-json:$&#123;jerseyVersion&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Segregate-the-code-from-the-configuration"><a href="#Segregate-the-code-from-the-configuration" class="headerlink" title="Segregate the code from the configuration"></a>Segregate the code from the configuration</h2><p>Ideally, your Gradle scripts should just contain configuration to keep them as simple / readable as possible. When there’s too much code in your scripts, you should consider moving this custom code outside of the Gradle scripts.</p>
<p>Gradle automatically compiled the “buildSrc” project prior running the main build. </p>
]]></content>
      <categories>
        <category>Build</category>
      </categories>
      <tags>
        <tag>build</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Socket</title>
    <url>/2019/07/16/Java-Socket/</url>
    <content><![CDATA[<h1 id="1-What-is-Socket"><a href="#1-What-is-Socket" class="headerlink" title="1. What is Socket"></a>1. What is Socket</h1><p>Two programs running over network use socket to communicate with each other. A socket is an endpoint of a network connection. Two applications can communicate with each other by sending and receiving streams over a connection. You need to know the IP address as well as the port number of the socket of the other application. In Java, Socket includes ServerSocket and Socket classes in java.net package. ServerSocket implements the server side. Socket implements client side.</p>
<p>ServerSocket is different from Socket. The role of a server socket is to wait for connection requests from clients. Once the server socket gets a connection request, it creates a Socket instance to handle the communication with the client.</p>
<p>On the client side, the client knows the hostname of the server and the port number on which the server is listening. The client also needs to identify itself to the server so it binds to a local port number. This is usually assigned by the system. </p>
<a id="more"></a>
<p>The server accepts the connection. Upon acceptance, the server gets a new socket and also has its remote endpoint set to the address and port of the client. It needs a new socket so that it can continue to listen to the original socket for connection request. </p>
<p>On the client side, if the connection is accepted, a socket is successfully created and the client can use the socket to communicate with the server.</p>
<p>Every TCP connection can be uniquely identified by a combination of an IP address and a port number. </p>
<p>If you are trying to the Web, the URL class and related classes (URLConnection, URLEncorder) are probably more appropriate than the socket classes. URLs use sockets as part of the underlying implementation. </p>
<h1 id="2-Socket"><a href="#2-Socket" class="headerlink" title="2. Socket"></a>2. Socket</h1><h2 id="1-Create-ServerSocket"><a href="#1-Create-ServerSocket" class="headerlink" title="1) Create ServerSocket."></a>1) Create ServerSocket.</h2><p>ServerSocket has 5 constructors. The most convenient one is ServerSocket(int port). It only needs a port number.</p>
<h2 id="2-Call-accept-method"><a href="#2-Call-accept-method" class="headerlink" title="2) Call accept() method"></a>2) Call accept() method</h2><p>The accept method is a blocking method. This method will only return when there is a connection request and its return value is an instance of the Socket class.</p>
<h2 id="3-Use-the-returned-Socket"><a href="#3-Use-the-returned-Socket" class="headerlink" title="3) Use the returned Socket"></a>3) Use the returned Socket</h2><p>The returned socket is used to create Reader and Writer to receive and send data. </p>
<p>Once you create/get an instance of the Socket class, you can use it to send and receive streams of bytes. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerSocket server &#x3D; new ServerSocket(8080);</span><br><span class="line">            Socket socket &#x3D; server.accept(); &#x2F;&#x2F; block here</span><br><span class="line">            BufferedReader is &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">            String line &#x3D; is.readLine();</span><br><span class="line">            System.out.println(&quot;Received from client: &quot; + line);</span><br><span class="line">            PrintWriter pw &#x3D; new PrintWriter(socket.getOutputStream());</span><br><span class="line">            pw.println(&quot;Received data: &quot; + line);</span><br><span class="line">            pw.flush();</span><br><span class="line">            pw.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            server.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String msg &#x3D; &quot;Client Data&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 8080);</span><br><span class="line">            PrintWriter pw &#x3D; new PrintWriter(socket.getOutputStream());</span><br><span class="line">            BufferedReader is &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">            pw.println(msg);</span><br><span class="line">            pw.flush();</span><br><span class="line">            String line &#x3D; is.readLine();</span><br><span class="line">            System.out.println(&quot;Received from server: &quot; + line);</span><br><span class="line">            pw.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-NioSocket"><a href="#3-NioSocket" class="headerlink" title="3. NioSocket"></a>3. NioSocket</h1><p>ServerSocketChannel and SocketChannle replace ServerSocket and Socket.</p>
<p>In the standard IO API you work with byte streams and character streams. In NIO you work with channels and buffers. Data is always read from a channel into a buffer, or written from a buffer to a channel.</p>
<p>ServerSocketChanel is created by its static factory method open(). Each ServerSocketChanel has one ServerSocket which can be retrieved by socket() method. You don’t use ServerSocket to listen for incoming requests. Instead, you use ServerSocket to bind a port number. You can use configureBlocking method to configure blocking mode. If it’s non-blocking mode, you can call register method to register Selector.</p>
<p>Selector is created by its static factory method open(). Use register method to register selector to ServerSocketChannel or SocketChannel. After registration, you cna use select method to waiting for requests. The selector method accepts a long type parameter. If you pass 0 or no parameter, select method will block until connection. </p>
<p>NioServer is created by the following steps:</p>
<ol>
<li>Create ServerSocketChannel</li>
<li>Create Selector and register it on ServerSocketChannel</li>
<li>Invoke select method of Selector and waiting for connection</li>
<li>SelectionKey collection is returned upon connection</li>
<li>Use SelectionKey to get Channel and Selector and type of operation.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class NioServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocketChannel ssc &#x3D; ServerSocketChannel.open();</span><br><span class="line">        ssc.socket().bind(new InetSocketAddress((8080)));</span><br><span class="line">        ssc.configureBlocking(false);</span><br><span class="line">        Selector selector &#x3D; Selector.open();</span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (selector.select(3000) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                System.out.println(&quot;Timeout...&quot;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;Process request...&quot;);</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIter &#x3D; selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            while (keyIter.hasNext()) &#123;</span><br><span class="line">                SelectionKey key &#x3D; keyIter.next();</span><br><span class="line">                if (key.isAcceptable()) &#123;</span><br><span class="line">                    &#x2F;&#x2F; handle accept</span><br><span class="line">                    SocketChannel sc &#x3D; ((ServerSocketChannel)key.channel()).accept();</span><br><span class="line">                    sc.configureBlocking(false);</span><br><span class="line">                    sc.register(key.selector(), SelectionKey.OP_READ, ByteBuffer.allocate(1024));</span><br><span class="line">                &#125;</span><br><span class="line">                if (key.isReadable()) &#123;</span><br><span class="line">                        &#x2F;&#x2F; handle</span><br><span class="line">                &#125;</span><br><span class="line">                keyIter.remove();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Service Provider Framework</title>
    <url>/2019/12/12/Service-Provider-Framework/</url>
    <content><![CDATA[<p>A service provider framework is a system in which multiple service providers implemnet a service, and the system make the implementation available to its clients, decoupling them from the implementation.</p>
<a id="more"></a>
<p>There are four essential components:</p>
<ul>
<li>A service interface</li>
<li>A provider registration API</li>
<li>A service access API</li>
<li>A service provider interface (optional)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Noodle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFlour</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteNoodle</span> <span class="keyword">implements</span> <span class="title">Noodle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFlour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Add white flour&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrownNoodle</span> <span class="keyword">implements</span> <span class="title">Noodle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFlour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Add brown flour&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NoodleProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">Noodle <span class="title">getNoodle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteNoodleProvider</span> <span class="keyword">implements</span> <span class="title">NoodleProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        NoodleManager.registerProvider(<span class="string">&quot;whiteNoodleProvider&quot;</span>, <span class="keyword">new</span> WhiteNoodleProvider())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Noodle <span class="title">getNoodle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WhiteNoodle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrownNoodleProvider</span> <span class="keyword">implements</span> <span class="title">NoodleProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        NoodleManager.registerProvider(<span class="string">&quot;brownNoodleProvider&quot;</span>, <span class="keyword">new</span> WhiteNoodleProvider())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Noodle <span class="title">getNoodle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BrownNoodle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoodleManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, NoodleProvider&gt; providers = <span class="keyword">new</span> ConcurrentHashMap&lt;String, SaltProvider&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerProvider</span><span class="params">(String name, SaltProvider p)</span> </span>&#123;  </span><br><span class="line">        providers.put(name, p);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Noodle <span class="title">getNoodle</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        NoodleProvider p = providers.get(name);  </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(  </span><br><span class="line">                    <span class="string">&quot;No NoodleProvider registered with name:&quot;</span> + name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> p.getNoodle();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;  </span><br><span class="line">        Class.forName(<span class="string">&quot;BrownNoodleProvider&quot;</span>);  </span><br><span class="line">        Noodle noodle = NoodleManager.getNoodle(<span class="string">&quot;brownNoodleProvider&quot;</span>);  </span><br><span class="line">        noodle.addFlour();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/2019/07/26/Spring-Boot/</url>
    <content><![CDATA[<h1 id="1-SpringApplication"><a href="#1-SpringApplication" class="headerlink" title="1 SpringApplication"></a>1 SpringApplication</h1><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.run(XXX.class, args);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(SpringBootPracticeApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=0&quot;</span>)  <span class="comment">// bind to a random port</span></span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;  // introduced since spring framework 3.1</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">                classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="meta">@ConfigurationPropertiesScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component:"></a><code>@Component</code>:</h2><p>处理类 -&gt; ConfigurationClassParser</p>
<p>扫描类 -&gt; </p>
<ul>
<li><p>ClassPathBeanDefinitionScanner</p>
<ul>
<li><h2 id="ClassPathScanningCandidateComponentProvider"><a href="#ClassPathScanningCandidateComponentProvider" class="headerlink" title="ClassPathScanningCandidateComponentProvider"></a>ClassPathScanningCandidateComponentProvider</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component.class));</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>@Service</p>
</li>
<li><p>@Repository</p>
</li>
<li><p>@Controller</p>
</li>
<li><p>@Configuration</p>
</li>
</ul>
<h2 id="Stereotype-Annotations"><a href="#Stereotype-Annotations" class="headerlink" title="Stereotype Annotations"></a>Stereotype Annotations</h2><h2 id="SpringApplication-类型判断"><a href="#SpringApplication-类型判断" class="headerlink" title="SpringApplication 类型判断"></a>SpringApplication 类型判断</h2><p><code>SpringApplication()</code> -&gt; <code>WebApplicationType.deduceFromClasspath();</code></p>
<ul>
<li><code>WebApplicationType.NONE</code> 非Web类型</li>
<li><code>WebApplicationType.REACTIVE</code>：Spring WebFlux<ul>
<li><code>spring-boot-starter-webflux</code></li>
</ul>
</li>
<li><code>WebApplicationType.SERVLET</code>：Servlet<ul>
<li><code>spring-boot-starter-web</code></li>
</ul>
</li>
</ul>
<h2 id="SpringBoot事件"><a href="#SpringBoot事件" class="headerlink" title="SpringBoot事件"></a>SpringBoot事件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add listener</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Listening Event: &quot;</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ClosedListener());</span><br><span class="line">        <span class="comment">// start context</span></span><br><span class="line">        <span class="comment">// one event is org.springframework.context.event.ContextRefreshedEvent</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// one event is org.springframework.context.PayloadApplicationEvent</span></span><br><span class="line">        context.publishEvent(<span class="string">&quot;HelloWorld&quot;</span>);  <span class="comment">// 发布一个HelloWorld内容的事件</span></span><br><span class="line">        <span class="comment">// one event is com.example.springbootpractice.SpringEventListenerDemo$MyEvent</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">&quot;HelloWorld 123&quot;</span>));</span><br><span class="line">        <span class="comment">// event is org.springframework.context.event.ContextClosedEvent</span></span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosedListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Destory context &quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Spring事件的类型<code>ApplicationEvent</code>  -&gt; 消息</li>
<li>Spring事件监听器<code>ApplicationListener</code>  -&gt; 消息消费者</li>
<li>Spring事件广播器<code>ApplicationEventMulticaster</code> -&gt; 消息生产者<ul>
<li>implementation: SimpleApplicationEventMulticaster();</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventMulticasterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationEventMulticaster multicaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</span><br><span class="line">        multicaster.addApplicationListener(event -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Accepted event: &quot;</span> + event);</span><br><span class="line">        &#125;);</span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="string">&quot;src1&quot;</span>, <span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="string">&quot;src2&quot;</span>, <span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootEventDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(SpringBootEventDemo.class)</span><br><span class="line">                .listeners(event -&gt; &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;get event: &quot;</span> + event.getClass().getSimpleName());</span><br><span class="line">                &#125;) <span class="comment">// add listeners</span></span><br><span class="line">                .run(args)</span><br><span class="line">                .close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-REST-in-Spring"><a href="#2-REST-in-Spring" class="headerlink" title="2. REST in Spring"></a>2. REST in Spring</h1><p>RPC</p>
<ul>
<li><p>语言相关</p>
<ul>
<li>Java - RMI</li>
<li>.NET - COM+</li>
</ul>
</li>
<li><p>语言无关</p>
<ul>
<li><p>SOA</p>
<ul>
<li>Web Services<ul>
<li>SOAP (传输介质)<ul>
<li>HTTP, SMTP(通讯协议)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>微服务</p>
<ul>
<li><p>REST</p>
<ul>
<li><p>HTML, XML, JSON</p>
</li>
<li><p>HTTP (通讯协议)</p>
<ul>
<li>HTTP 1.1<ul>
<li>短链接</li>
<li>Keep-Alive</li>
<li>连接池</li>
<li>Long Polling</li>
</ul>
</li>
<li>WebSockets</li>
<li>HTTP/2<ul>
<li>长链接</li>
</ul>
</li>
</ul>
</li>
<li><p>技术</p>
<ul>
<li>Spring客户端： RestTemplate</li>
<li>Spring WebMVC： @RestController = @Controller + @ResponseBody + @RequestBody<br>@ Spring Cloud： RestTemplate扩展 + @LoadBalanced</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>HTTP状态码(org.springframework.http.HttpStatus)</p>
<ul>
<li>200</li>
<li>304</li>
<li>400</li>
<li>404</li>
<li>500</li>
</ul>
</li>
</ul>
<h2 id="Uniform-interface"><a href="#Uniform-interface" class="headerlink" title="Uniform interface"></a>Uniform interface</h2><ul>
<li>URI vs URL</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class="line">    <span class="keyword">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">        processRequest(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cacheability"><a href="#Cacheability" class="headerlink" title="Cacheability"></a>Cacheability</h2><p><code>@ResponseBody</code> -&gt; 响应体</p>
<ul>
<li>响应 Response<ul>
<li>响应头（Headers）<ul>
<li>元信息（meta-data）<ul>
<li>Accept-Language -&gt; <code>Locale</code></li>
<li>Connection -&gt; Keep-Alive</li>
</ul>
</li>
<li>实现 <ul>
<li>多值map <code>MultiValueMap</code></li>
<li>Name: Value =&gt; 1: N</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaders</span> <span class="keyword">implements</span> <span class="title">MultiValueMap</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>响应体<ul>
<li>业务信息</li>
<li>Body：Http实体，Rest<ul>
<li><code>@ResponseBody</code></li>
<li><code>HttpEntity.body</code></li>
</ul>
</li>
<li>Payload：消息JMS，事件，SOAP</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpEntity&lt;?&gt; EMPTY = <span class="keyword">new</span> HttpEntity&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpHeaders headers;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ResponseEntity</code> extends <code>HttpEntity</code><br><code>RequestEntity</code> extends <code>HttpEntity</code></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>State Pattern</title>
    <url>/2019/08/26/State-Pattern/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>An object’s behaviour depends on its internal state.</p>
<ol>
<li>Identify an Wrapper class (a class wraps the state). It will serve as the “state machine” from the client’s perspective.</li>
<li>Create a state base class that replicates the methods of the wrapper class. Each method takes an extra parameter: an instance of the wrapper class.</li>
<li>Implement state base class</li>
<li>The wrapper class maintain a current state object</li>
<li>All client requests to the wrapper class are delegated to the current state object, and the wrapper object’s this pointer is passed</li>
<li>The state method change the “current” state in the wrapper object as appropriate.<a id="more"></a>
<h3 id="Real-world-examples"><a href="#Real-world-examples" class="headerlink" title="Real world examples"></a>Real world examples</h3></li>
</ol>
<p><a href="https://github.com/npathai/jdiameter/blob/master/core/jdiameter/api/src/main/java/org/jdiameter/api/app/State.java">JDiameter - Diameter State Machine</a></p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s design a vending machine</p>
<p>identify what states are and how they are transfered to each other and draw a graph. The node is the state. The arrow is the method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMoney</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backMoney</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoMoneyState</span> <span class="keyword">implements</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> VendingMachine machine;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoMoneyState</span><span class="params">(VendingMachine machine)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.machine = machine;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;投币成功&quot;</span>);</span><br><span class="line">        machine.setState(machine.getHasMoneyState());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您未投币，想退钱？...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您未投币，想拿东西么？...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;非法状态！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldOutState</span> <span class="keyword">implements</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> VendingMachine machine;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoldOutState</span><span class="params">(VendingMachine machine)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.machine = machine;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;投币失败，商品已售罄&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您未投币，想退钱么？...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;商品售罄，转动手柄也木有用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;非法状态！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The vending machine (wrapper class) has the same methods as the state interface:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State noMoneyState;</span><br><span class="line">    <span class="keyword">private</span> State hasMoneyState;</span><br><span class="line">    <span class="keyword">private</span> State soldState;</span><br><span class="line">    <span class="keyword">private</span> State soldOutState;</span><br><span class="line">    <span class="keyword">private</span> State winnerState ; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> State currentState = noMoneyState;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VendingMachine</span><span class="params">(<span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        noMoneyState = <span class="keyword">new</span> NoMoneyState(<span class="keyword">this</span>);</span><br><span class="line">        hasMoneyState = <span class="keyword">new</span> HasMoneyState(<span class="keyword">this</span>);</span><br><span class="line">        soldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line">        soldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line">        winnerState = <span class="keyword">new</span> WinnerState(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">            currentState = noMoneyState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState.insertMoney();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backMoney</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState.backMoney();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState.turnCrank();</span><br><span class="line">        <span class="keyword">if</span> (currentState == soldState || currentState == winnerState)</span><br><span class="line">            currentState.dispense();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发出一件商品...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//getter setter omitted ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
  </entry>
  <entry>
    <title>Strategy Pattern</title>
    <url>/2019/08/26/Strategy-Pattern/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Strategy Pattern can be used to avoid if-else or swtich statement.</p>
<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. </p>
<p>Encapsulate interface details in a base class, and bury implementation details in derived classes</p>
<a id="more"></a>
<img src="/2019/08/26/Strategy-Pattern/Strategy1.png" class="" title="strategy">

<p>The client is compled only to an abstraction.</p>
<ol>
<li>Identify an algorithm</li>
<li>Specify the signature for that algorithm in an interface</li>
<li>Implement the interface for concrete algorithm</li>
<li>Clients of the algorithm uses the interface.</li>
</ol>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><ul>
<li>Interface:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Client: </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PayStrategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContextStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payout</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        strategy.pay(money);<span class="comment">//调用策略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(PayStrategy strategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy=strategy;<span class="comment">//设置策略类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Concrete strategies:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPayStrategy</span> <span class="keyword">implements</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用支付宝的接口具体代码 略...</span></span><br><span class="line">        <span class="keyword">if</span>(money&lt;=<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatPayStrategy</span> <span class="keyword">implements</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
  </entry>
  <entry>
    <title>Typeclasses</title>
    <url>/2020/08/05/Typeclasses/</url>
    <content><![CDATA[<h2 id="Type-class-and-instance"><a href="#Type-class-and-instance" class="headerlink" title="Type class and instance"></a>Type class and instance</h2><p>In scala, a type class is represented by a trait with at least one type parameter. When we implement the type class, we provides a concret type we care about. The type can be from the Scala standard library and types from our domain model.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">JsonWriter</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span></span>(value: <span class="type">T</span>): <span class="type">Json</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, email: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">JsonWriterInstances</span> </span>&#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> stringWriter: <span class="type">JsonWriter</span>[<span class="type">String</span>] =</span><br><span class="line">        <span class="keyword">new</span> <span class="type">JsonWriter</span>[<span class="type">String</span>] &#123;</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">write</span></span>(value: <span class="type">String</span>): <span class="type">Json</span> = <span class="type">JsString</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> personWriter: <span class="type">JsonWriter</span>[<span class="type">Person</span>] =</span><br><span class="line">        <span class="keyword">new</span> <span class="type">JsonWriter</span>[<span class="type">Person</span>] &#123;</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">write</span></span>(value: <span class="type">Person</span>): <span class="type">Json</span> =</span><br><span class="line">                <span class="type">JsObject</span>(<span class="type">Map</span>(</span><br><span class="line">                    <span class="string">&quot;name&quot;</span> -&gt; <span class="type">JsString</span>(value.name),</span><br><span class="line">                    <span class="string">&quot;email&quot;</span> -&gt; <span class="type">JsString</span>(value.email)</span><br><span class="line">                ))</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// etc...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Use-of-type-class-instance"><a href="#Use-of-type-class-instance" class="headerlink" title="Use of type class instance"></a>Use of type class instance</h2><p>The implicit type class instance is used by the method which accepts them as an implicit parameter. The implicit type class instance provide a specific functionality.</p>
<h3 id="Interface-objects"><a href="#Interface-objects" class="headerlink" title="Interface objects"></a>Interface objects</h3><p>Place methods in a singleton object to use the type class:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Json</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toJson</span></span>[<span class="type">A</span>](value: <span class="type">A</span>)(<span class="keyword">implicit</span> w: <span class="type">JsonWriter</span>[<span class="type">A</span>]): <span class="type">Json</span> = w.write(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>we import any type class instances we care about and call the relevant method:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">JsonWriterInstances</span>._</span><br><span class="line"><span class="type">Json</span>.toJson(<span class="type">Person</span>(<span class="string">&quot;Dave&quot;</span>, <span class="string">&quot;dave@example.com&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="Interface-Syntax"><a href="#Interface-Syntax" class="headerlink" title="Interface Syntax"></a>Interface Syntax</h3><p>We enahace the value type:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JsonSyntax</span> </span>&#123;</span><br><span class="line">    <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonWriterOps</span>[<span class="type">A</span>](<span class="params">value: <span class="type">A</span></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">toJson</span></span>(<span class="keyword">implicit</span> w: <span class="type">JsonWriter</span>[<span class="type">A</span>]): <span class="type">Json</span> =</span><br><span class="line">            w.write(value)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We import it alongside the type class instance</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">JsonWriterInstances</span>._</span><br><span class="line"><span class="keyword">import</span> <span class="type">JsonSyntax</span>._</span><br><span class="line"><span class="type">Person</span>(<span class="string">&quot;Dave&quot;</span>, <span class="string">&quot;dave@example.com&quot;</span>).toJson</span><br></pre></td></tr></table></figure>

<h3 id="The-implicitly-Method"><a href="#The-implicitly-Method" class="headerlink" title="The implicitly Method"></a>The implicitly Method</h3><h2 id="Where-to-place-type-class-instance"><a href="#Where-to-place-type-class-instance" class="headerlink" title="Where to place type class instance"></a>Where to place type class instance</h2><ol>
<li>by placing them in an object such as JsonWriterInstances;</li>
<li>by placing them in a trait;</li>
<li>by placing them in the companion object of the type class;</li>
<li>by placing them in the companion object of the parameter type.</li>
</ol>
<h3 id="Two-ways-to-define-a-type-class-instance"><a href="#Two-ways-to-define-a-type-class-instance" class="headerlink" title="Two ways to define a type class instance"></a>Two ways to define a type class instance</h3><ol>
<li>by defining concrete instances as implicit vals of the required type;</li>
<li>by defining implicit methods to construct instances from other type class instances.</li>
</ol>
<p>The parameter needs to be implicit.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">optionWriter</span></span>[<span class="type">A</span>](<span class="keyword">implicit</span> writer: <span class="type">JsonWriter</span>[<span class="type">A</span>]): <span class="type">JsonWriter</span>[<span class="type">Option</span>[<span class="type">A</span>]] =</span><br><span class="line">    <span class="keyword">new</span> <span class="type">JsonWriter</span>[<span class="type">Option</span>[<span class="type">A</span>]] &#123;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">write</span></span>(option: <span class="type">Option</span>[<span class="type">A</span>]): <span class="type">Json</span> =</span><br><span class="line">            option <span class="keyword">match</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="type">Some</span>(aValue) =&gt; writer.write(aValue)</span><br><span class="line">                <span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="type">JsNull</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h3><p>Variance is all about substitue one value for another. Covariance is generally for output. List[+T] means you can subsitute List[Apple] for List[Fruit]. Contravariance is generally for input. Consier a method <code>def format(value: T, writer: JsonWriter[T]): Json</code>, which combination of value and writer can you pass to format?</p>
<p>When the compiler searches for an implicit it looks for one matching the type or subtype. </p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Define a type class - a trait takes at least one generic parameter</li>
<li>Creat a type class instance - implicit</li>
<li>Define a method to use the implicit type class instance</li>
</ul>
<p>We can add new behaviour to closed data type without using inheritance, and without accessing to original source code of those types. </p>
]]></content>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>What is REST</title>
    <url>/2019/07/07/What-is-REST/</url>
    <content><![CDATA[<h1 id="1-Origin"><a href="#1-Origin" class="headerlink" title="1. Origin"></a>1. Origin</h1><p>REST this word is proposed by <a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a> in his <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">paper</a>. He is also the originator of the HTTP specification.</p>
<p>This is what he said in his paper:</p>
<blockquote>
<p>My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture.</p>
</blockquote>
<h1 id="2-Key-Concepts"><a href="#2-Key-Concepts" class="headerlink" title="2. Key Concepts"></a>2. Key Concepts</h1><p>REST stands for Representational State Transfer. It’s a architecural style or design pattern for APIs (it’s not a protocol). It’s a popular approach to building APIs because it emphasizes simplicity, extensibility, reliability, and performance.</p>
<a id="more"></a>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>A client is the person or software who uses the API.</p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p>A resource can be any object that API can provide information about. Any information that can be named can be a resource. Each resource has a URI. If you obtain one resource, you jut use its URI.</p>
<h2 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h2><p>The state of resource at any particular timestamp is known as resource representation. Representations are the way API clients see the resources. A representation consists of data, metadata describing the data and hypermedia links which can help the clients in transition to next desired state. A RESTful API never hands resources directly to a client. Interactions happen only via representations of the real resource. For example, you can store all users in a database table, but the representation of these users can be JSON or XML.</p>
<p>The data format of a representation is known as a media type. The media type identifies a specification that defines how a representation is to be processed. </p>
<p>Resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others.</p>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>Clients don’t have direct access to resources, so they need actions to alter the state of a resource. Roy Fielding has never mentioned any recommendation around which method to be used in which condition. All he emphasizes is that it should be uniform interface.</p>
<h1 id="3-REST-vs-HTTP"><a href="#3-REST-vs-HTTP" class="headerlink" title="3. REST vs HTTP"></a>3. REST vs HTTP</h1><p>It’s important to mention that REST is not limited to HTTP. The author of REST and HTTP is same, thus REST and HTTP fits very well with each other.</p>
<p>In HTTP, URLs can be used to locate REST resources. Media Types spcifies how the data in requests and responses look like. HTTP built-in methods implement REST actions.</p>
<h1 id="4-REST-6-Constrains"><a href="#4-REST-6-Constrains" class="headerlink" title="4. REST 6 Constrains"></a>4. REST 6 Constrains</h1><h2 id="Uniform-interface"><a href="#Uniform-interface" class="headerlink" title="Uniform interface"></a>Uniform interface</h2><p>You MUST decide APIs interface for resources inside the system. A resource has to be represented by a URI. The response should provide a way to fetch related or additional data.</p>
<p>A single resource should not be too large and contain each and everything in its representation. Whenever relevant, a resource should contain links (HATEOAS) pointing to relative URIs to fetch related information.</p>
<blockquote>
<p>Once a developer becomes familiar with one of your API, he should be able to follow the similar approach for other APIs.</p>
</blockquote>
<h2 id="Client-Server-Spearation"><a href="#Client-Server-Spearation" class="headerlink" title="Client - Server Spearation"></a>Client - Server Spearation</h2><p>The client and the server MUST be able to evolve separately without any dependency on each other. The client should know only resource URIs and that’s all.</p>
<blockquote>
<p>Servers and clients may also be replaced and developed independently, as long as the interface between them is not altered.</p>
</blockquote>
<h2 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h2><p>The server doesn’t remember anything about the user. The server treats each request as a new request. No session, no history. So the request needs to contains all the information the server needs to process the request - including authentication and authorization details.</p>
<blockquote>
<p>No client context shall be stored on the server between requests. The client is responsible for managing the state of the application.</p>
</blockquote>
<h2 id="Layerd-system"><a href="#Layerd-system" class="headerlink" title="Layerd system"></a>Layerd system</h2><p>There maybe mutiple layers in the backend (security layer, caching layer, load-balancing layer, or other functionality). The client is agnostic to the layers. You deploy the APIs on server A, and store data on server B and authenticate requests in Server C</p>
<h2 id="Cacheable"><a href="#Cacheable" class="headerlink" title="Cacheable"></a>Cacheable</h2><p>The response should contain information about whether or not hte data is cacheable. These resources MUST declare themselves cacheable. Caching can be implemented on the server or client side.</p>
<blockquote>
<p>Well-managed caching partially or completely eliminates some client-server interactions, further improving scalability and performance.</p>
</blockquote>
<h2 id="Code-on-demand"><a href="#Code-on-demand" class="headerlink" title="Code-on-demand"></a>Code-on-demand</h2><p>The response can return codes to client.</p>
<h1 id="HTTP-status-code"><a href="#HTTP-status-code" class="headerlink" title="HTTP status code"></a>HTTP status code</h1><h2 id="2xx-Success-class"><a href="#2xx-Success-class" class="headerlink" title="2xx - Success class"></a>2xx - Success class</h2><p>These status code are returned when the server succeeded in processing the request. 200 OK. 201 Created (ideally, contains a Location header). 204 No Content (no response body)</p>
<h2 id="3xx-Redirection-class"><a href="#3xx-Redirection-class" class="headerlink" title="3xx - Redirection class"></a>3xx - Redirection class</h2><p>These are used when the server found the requested resource somewhere else. 301 Moved Permanently. The server SHOULD generate a Location header field in the response containing a preferred URI reference for the new permanent URI.</p>
<h2 id="4xx-Client-error-class"><a href="#4xx-Client-error-class" class="headerlink" title="4xx - Client error class"></a>4xx - Client error class</h2><p>The server retrieved a wrong request. 400 Bad Request, 401 Unauthorized, 403 Forbidden. 404 Not Found.</p>
<h2 id="5xx-Server-error-class"><a href="#5xx-Server-error-class" class="headerlink" title="5xx - Server error class"></a>5xx - Server error class</h2><p>Something wrong happens on the server.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>REST</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot Controller Method Summary</title>
    <url>/2019/08/02/springboot-controller-method-summary/</url>
    <content><![CDATA[<h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h1><h2 id="defaultValue"><a href="#defaultValue" class="headerlink" title="defaultValue"></a>defaultValue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;anonymous&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;v1&#x2F;person?name&#x3D;abc</span><br><span class="line">----</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<h2 id="required-false"><a href="#required-false" class="headerlink" title="required false"></a>required false</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;anonymous&quot;)</span> String name, <span class="meta">@RequestParam(required = false)</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;v1&#x2F;person?name&#x3D;abc</span><br><span class="line">----</span><br><span class="line">anonymous null</span><br></pre></td></tr></table></figure>

<h1 id="PathVariable"><a href="#PathVariable" class="headerlink" title="PathVariable"></a>PathVariable</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/person/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFooById</span><span class="params">(<span class="meta">@PathVariable(required = false)</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;person&#x2F;abc</span><br><span class="line">----</span><br><span class="line">ID: abc</span><br></pre></td></tr></table></figure>

<h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><h2 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/ex/foos&quot;, headers = &quot;userid=1&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoosWithHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Get some Foos with Header&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -H &quot;userid:1&quot; http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;v1&#x2F;ex&#x2F;foos</span><br></pre></td></tr></table></figure>

<h2 id="produces"><a href="#produces" class="headerlink" title="produces"></a>produces</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;foos/duplicate&quot;, produces = MediaType.APPLICATION_XML_VALUE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">duplicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Duplicate&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Framework</title>
    <url>/2019/07/19/Spring-Framework/</url>
    <content><![CDATA[<h1 id="Spring-Components"><a href="#Spring-Components" class="headerlink" title="Spring Components"></a>Spring Components</h1><ul>
<li>Spring Core<ul>
<li>provide core utilities and commons stuff</li>
</ul>
</li>
<li>Spring Context<ul>
<li>provides application context, IoC</li>
</ul>
</li>
<li>Spring Web</li>
<li>Spring MVC<ul>
<li>spring mvc depends on spring web.</li>
</ul>
</li>
<li>Spring DAO</li>
<li>Spring ORM</li>
<li>Spring AOP</li>
</ul>
<h1 id="配置文件封装"><a href="#配置文件封装" class="headerlink" title="配置文件封装"></a>配置文件封装</h1><p>Spring的配置文件由ClassPathResource进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an &#123;<span class="doctag">@link</span> InputStream&#125; for the content of an underlying resource.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;It is expected that each call creates a &lt;i&gt;fresh&lt;/i&gt; stream.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This requirement is particularly important when you consider an API such</span></span><br><span class="line"><span class="comment">     * as JavaMail, which needs to be able to read the stream multiple times when</span></span><br><span class="line"><span class="comment">     * creating mail attachments. For such a use case, it is &lt;i&gt;required&lt;/i&gt;</span></span><br><span class="line"><span class="comment">     * that each &#123;<span class="doctag">@code</span> getInputStream()&#125; call returns a fresh stream.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the input stream for the underlying resource (must not be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> java.io.FileNotFoundException if the underlying resource doesn&#x27;t exist</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the content stream could not be opened</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface for a resource descriptor that abstracts from the actual</span></span><br><span class="line"><span class="comment"> * type of underlying resource, such as a file or class path resource.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Different source has different implementation to Resource. FileSystemResource and ClassPathResource.</p>
<h1 id="Register-bean-into-IoC"><a href="#Register-bean-into-IoC" class="headerlink" title="Register bean into IoC"></a>Register bean into IoC</h1><h2 id="Use-xml"><a href="#Use-xml" class="headerlink" title="Use xml"></a>Use xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.app.spring.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Person person = (Person) ac.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Use-annotation"><a href="#Use-annotation" class="headerlink" title="Use annotation"></a>Use annotation</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">        Person person = (Person) ac.getBean(<span class="string">&quot;person01&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] namesForBean = ac.getBeanNamesForType(Person.class);</span><br><span class="line">        <span class="keyword">for</span>(String name: namesForBean) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;beanName&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;Name&quot;</span>, <span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>Just find Controller annotated bean.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.app.spring2&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// add this bean to IoC</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;Name&quot;</span>, <span class="number">14</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(value = &#123;Dog.class, Cat.class, TestImportSelector.class, TestImportBeanDefinitionRegister.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add person bean&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;Name&quot;</span>, <span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.app.spring6.bean.Fish&quot;</span>, <span class="string">&quot;com.app.spring6.bean.Tiger&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Use BeanDefinitionRegistry to manually register a bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestImportBeanDefinitionRegister</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> dog = registry.containsBeanDefinition(<span class="string">&quot;com.app.spring6.bean.Dog&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> cat = registry.containsBeanDefinition(<span class="string">&quot;com.app.spring6.bean.cat&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dog &amp;&amp; cat) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(<span class="string">&quot;com.app.spring6.bean.Pig&quot;</span>);</span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;pig&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>A FactoryBean is defined in a bean style, but the object exposed for bean is always the object that it creates.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Monkey</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Monkey <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Monkey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In AbstractBeanFactory class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Object beanInstance, String name, String beanName, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t let calling code try to dereference the factory if the bean isn&#x27;t a factory.</span></span><br><span class="line">        <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">                <span class="keyword">return</span> beanInstance;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(beanName, beanInstance.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">        <span class="comment">// If it&#x27;s a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">        <span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">        <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Return bean instance from factory.</span></span><br><span class="line">            FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">            <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">            <span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">                mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">            object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结：<br>给容器注册组件：</p>
<ul>
<li>包扫描 (@Controller, @Service, @Repository, @Component)<ul>
<li>一般针对我们自己写的累</li>
</ul>
</li>
<li>@Bean 导入第三方类或包的组件</li>
<li>@Import </li>
<li>使用FactoryBean</li>
</ul>
<h1 id="Spring-Bean-lifecycle"><a href="#Spring-Bean-lifecycle" class="headerlink" title="Spring Bean lifecycle"></a>Spring Bean lifecycle</h1><ul>
<li><p>bean的生命周期是指：bean创建 -&gt; 初始化 -&gt; 销毁</p>
<ul>
<li>在@Bean中指定initMethod and destroyMethod</li>
<li>让bean实现InitializingBean 和DisposableBean 接口</li>
<li>使用@PostConstruct和@PreDestory annotation</li>
</ul>
</li>
<li><p>BeanPostProcessor</p>
</li>
</ul>
<h2 id="Use-initMethod-and-destoryMethod"><a href="#Use-initMethod-and-destoryMethod" class="headerlink" title="Use initMethod and destoryMethod"></a>Use initMethod and destoryMethod</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flower <span class="title">flower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Flower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Flower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Flower constructor...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Flower ...init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Flower ...destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;IoC is created&quot;</span>);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flower constructor...</span><br><span class="line">Flower ...init...</span><br><span class="line">IoC is created</span><br><span class="line">Flower ...destroy...</span><br></pre></td></tr></table></figure>

<p>In AbstractBeanFactory.java, doGetBean method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create bean instance.</span></span><br><span class="line">                <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                    sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                            <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                            <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                            <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            <span class="keyword">throw</span> ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>createBean in AbstractAutowireCapableBeanFactory</p>
<h2 id="Use-InitializingBean-DisposableBean-interface"><a href="#Use-InitializingBean-DisposableBean-interface" class="headerlink" title="Use InitializingBean, DisposableBean interface"></a>Use InitializingBean, DisposableBean interface</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Train</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Use-BeanPostProcessor"><a href="#Use-BeanPostProcessor" class="headerlink" title="Use BeanPostProcessor"></a>Use BeanPostProcessor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization....&quot;</span> + beanName + <span class="string">&quot;bean&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization....&quot;</span> + beanName + <span class="string">&quot;bean&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PostProcessorBeforeInit -&gt; initMethod -&gt; PostProcessorAfterInit<br>initializeBean method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      Object wrappedBean = bean;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Processors are also beans in IoC. They’re created before business bean.</p>
<p>Spring底层对BeanPostProcessor的使用:</p>
<ul>
<li><code>ApplicationContextAwareProcessor</code></li>
<li><code>BeanValidationPostProcessor</code></li>
<li><code>InitDestroyAnnotationBeanPostProcessor</code></li>
</ul>
<h1 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h1><p>Use @Value to assign value to this variable. It supports String, StringEL and properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;Test&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;bird.color&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String color;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/test.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<h1 id="Autowired-Qualifier-Primary"><a href="#Autowired-Qualifier-Primary" class="headerlink" title="Autowired, Qualifier, Primary"></a>Autowired, Qualifier, Primary</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br></pre></td></tr></table></figure>


<h1 id="Aware-interface"><a href="#Aware-interface" class="headerlink" title="Aware interface"></a>Aware interface</h1><p>The following method in <code>AbstractAutowireCapableBeanFactory</code>: Initialize the given bean instance, applying factory callbacks as well as init methods and bean post processors.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">                invokeAwareMethods(beanName, bean);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object wrappedBean = bean;</span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">                    beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结：把Spring底层的组件可以注入到自定义的bean中</p>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><ul>
<li><p>@Before</p>
</li>
<li><p>@After</p>
</li>
<li><p>@AfterReturning</p>
</li>
<li><p>@AfterThrowing</p>
</li>
<li><p>@Around</p>
</li>
<li><p>@EnableAspectJAutoProxy</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public int com.app.spring10.aop.Calculator.div(int, int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div start @Before &quot;</span> + joinPoint.getSignature().getName()</span><br><span class="line">        + <span class="string">&quot; &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div end @After&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div return... result is @AfterReturning &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div return throwing... exception is @AfterThrowing &quot;</span> + exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before proceed @Around&quot;</span>);</span><br><span class="line">        Object obj = proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;After proceed @Around&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Before proceed @Around</span><br><span class="line">div start @Before</span><br><span class="line">After proceed @Around</span><br><span class="line">div end @After</span><br><span class="line">div return... result is @AfterReturning </span><br></pre></td></tr></table></figure>

<p>AOP原理： 给容器注册了什么组件，这个组件什么时候工作，这个组件功能是什么</p>
<p>我们打开源码知道<code>class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar</code>，ImportBeanDefinitionRegistrar 是可以给容器自定义注册组件的，</p>
<ul>
<li>它注册<code>AnnotationAwareAspectJAutoProxyCreator</code>组件</li>
<li>然后<code>AnnotationAwareAspectJAutoProxyCreator</code>是实现了一个postprocessor和Ordered和BeanFactoryAware<br><code>class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar</code></li>
</ul>
<p>==&gt; <code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</code></p>
<p>==&gt; <code>registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source)</code></p>
<p>==&gt; <code>registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</code> (AUTO_PROXY_CREATOR_BEAN_NAME = org.springframework.aop.config.internalAutoProxyCreator )</p>
<p>So the <code>AnnotationAwareAspectJAutoProxyCreator</code> bean definition is registered in IoC.</p>
<p><code>public class AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator</code>. We can see it’s <code>SmartInstantiationAwareBeanPostProcessor</code>, <code>Ordered</code> and <code>BeanFactoryAware</code></p>
<p><code>AbstractAutoProxyCreator</code> creates the proxy of the target class.</p>
<h1 id="Transactional"><a href="#Transactional" class="headerlink" title="Transactional"></a>Transactional</h1><p>@EnableTransactionManagement</p>
<p><code>public class TransactionManagementConfigurationSelector extends AdviceModeImportSelector&lt;EnableTransactionManagement&gt;</code></p>
<p>it’s a selector.</p>
<p><code>TransactionInterceptor.class</code></p>
<h1 id="BeanFactory的两个重要的后置处理器"><a href="#BeanFactory的两个重要的后置处理器" class="headerlink" title="BeanFactory的两个重要的后置处理器"></a>BeanFactory的两个重要的后置处理器</h1><ul>
<li><p>BeanFactoryPostProcessor </p>
<ul>
<li>在BeanFactory标准初始化之后调用，来定制和修改BeanFactory的内容；</li>
<li>所有的bean定义已经保存加载到beanFactory，但是bean的实例还未创建</li>
</ul>
</li>
<li><p>BeanDefinitionRegistryPostProcessor</p>
</li>
</ul>
<h1 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h1><p>Spring Web MVC is hte original web framework built on the Servlet API and has been included in the Spring Framework from the very beginning. In addition to Spring Web MVC, Spring Framework 5.0 introduced a reactive-stack web framework whose name is “Spring WebFlux”</p>
<h2 id="ServletContainerInitializer"><a href="#ServletContainerInitializer" class="headerlink" title="ServletContainerInitializer"></a>ServletContainerInitializer</h2><p>web.xml three main components:</p>
<ul>
<li>Servlet<br>The Container runs multiple threads to process multiple requests to a single servlet.</li>
</ul>
<ul>
<li>Filter</li>
<li>Listener</li>
</ul>
<p>SpringMVC uses ServletContainerInitializer to load IoC and to register servlet, filter and listener.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(java.util.Set&lt;java.lang.Class&lt;?&gt;&gt; c, ServletContext ctx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register servlet</span></span><br><span class="line">    javax.servlet.ServletRegistration.Dynamic servlet = ctx.addServlet(<span class="string">&quot;orderServlet&quot;</span>, <span class="keyword">new</span> OrderServlet());</span><br><span class="line">    servlet.addMapping(<span class="string">&quot;/orderTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// register listener</span></span><br><span class="line">   ctx.addListener(OrderListener.class);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// register filter</span></span><br><span class="line">   javax.servlet.FilterRegistration.Dynamic filter = ctx.addFilter(<span class="string">&quot;orderFilter&quot;</span>, OrderFilter.class);</span><br><span class="line">   <span class="comment">// add mapping to specify which servlet to intercept</span></span><br><span class="line">   filter.addMappingForUrlPatterns();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringServletContainerInitializer"><a href="#SpringServletContainerInitializer" class="headerlink" title="SpringServletContainerInitializer"></a>SpringServletContainerInitializer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(<span class="meta">@Nullable</span> Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (webAppInitializerClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; waiClass : webAppInitializerClasses) &#123;</span><br><span class="line">                <span class="comment">// Be defensive: Some servlet containers provide us with invalid classes,</span></span><br><span class="line">                <span class="comment">// no matter what @HandlesTypes says...</span></span><br><span class="line">                <span class="keyword">if</span> (!waiClass.isInterface() &amp;&amp; !Modifier.isAbstract(waiClass.getModifiers()) &amp;&amp;</span><br><span class="line">                        WebApplicationInitializer.class.isAssignableFrom(waiClass)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initializers.add((WebApplicationInitializer)</span><br><span class="line">                                ReflectionUtils.accessibleConstructor(waiClass).newInstance());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Failed to instantiate WebApplicationInitializer class&quot;</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initializers.isEmpty()) &#123;</span><br><span class="line">            servletContext.log(<span class="string">&quot;No Spring WebApplicationInitializer types detected on classpath&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.log(initializers.size() + <span class="string">&quot; Spring WebApplicationInitializers detected on classpath&quot;</span>);</span><br><span class="line">        AnnotationAwareOrderComparator.sort(initializers);</span><br><span class="line">        <span class="keyword">for</span> (WebApplicationInitializer initializer : initializers) &#123;</span><br><span class="line">            initializer.onStartup(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Let’s see what impl of webAppInitializerClasses are:</p>



<p>First one is <code>AbstractContextLoaerInitializer</code>. In its onStartup method, it registers context loader listener.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        registerContextLoaderListener(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register a &#123;<span class="doctag">@link</span> ContextLoaderListener&#125; against the given servlet context. The</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> ContextLoaderListener&#125; is initialized with the application context returned</span></span><br><span class="line"><span class="comment">     * from the &#123;<span class="doctag">@link</span> #createRootApplicationContext()&#125; template method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext the servlet context to register the listener against</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerContextLoaderListener</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        WebApplicationContext rootAppContext = createRootApplicationContext();</span><br><span class="line">        <span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ContextLoaderListener listener = <span class="keyword">new</span> ContextLoaderListener(rootAppContext);</span><br><span class="line">            listener.setContextInitializers(getRootApplicationContextInitializers());</span><br><span class="line">            servletContext.addListener(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;No ContextLoaderListener registered, as &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;createRootApplicationContext() did not return an application context&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>It creates a root application context firstly. It uses template pattern here. The actual creation is done by its child class.</p>
<p>Second one is <code>AbstractDispatcherServletInitializer</code>. As name implies, it initializes dispatcherServlet.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartup(servletContext);</span><br><span class="line">        registerDispatcherServlet(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register a &#123;<span class="doctag">@link</span> DispatcherServlet&#125; against the given servlet context.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method will create a &#123;<span class="doctag">@code</span> DispatcherServlet&#125; with the name returned by</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #getServletName()&#125;, initializing it with the application context returned</span></span><br><span class="line"><span class="comment">     * from &#123;<span class="doctag">@link</span> #createServletApplicationContext()&#125;, and mapping it to the patterns</span></span><br><span class="line"><span class="comment">     * returned from &#123;<span class="doctag">@link</span> #getServletMappings()&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Further customization can be achieved by overriding &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #customizeRegistration(ServletRegistration.Dynamic)&#125; or</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #createDispatcherServlet(WebApplicationContext)&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext the context to register the servlet against</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDispatcherServlet</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        String servletName = getServletName();</span><br><span class="line">        Assert.hasLength(servletName, <span class="string">&quot;getServletName() must not return null or empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">        WebApplicationContext servletAppContext = createServletApplicationContext();</span><br><span class="line">        Assert.notNull(servletAppContext, <span class="string">&quot;createServletApplicationContext() must not return null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);</span><br><span class="line">        Assert.notNull(dispatcherServlet, <span class="string">&quot;createDispatcherServlet(WebApplicationContext) must not return null&quot;</span>);</span><br><span class="line">        dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers());</span><br><span class="line"></span><br><span class="line">        ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);</span><br><span class="line">        <span class="keyword">if</span> (registration == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Failed to register servlet with name &#x27;&quot;</span> + servletName + <span class="string">&quot;&#x27;. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Check if there is another servlet registered under the same name.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registration.addMapping(getServletMappings());</span><br><span class="line">        registration.setAsyncSupported(isAsyncSupported());</span><br><span class="line"></span><br><span class="line">        Filter[] filters = getServletFilters();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(filters)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Filter filter : filters) &#123;</span><br><span class="line">                registerServletFilter(servletContext, filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        customizeRegistration(registration);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>It creates servlet application context. Same here, the actual implementation of <code>createServletApplicationContext</code> is done by its child class.</p>
<p>Now, The third impl is <code>AbstractAnnotationConfigDispatcherServletInitializer</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] configClasses = getRootConfigClasses();</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">        AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        context.register(configClasses);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">    Class&lt;?&gt;[] configClasses = getServletConfigClasses();</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">        context.register(configClasses);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#spring-web</code></p>
<p>DispatcherServlet is a HttpServlet. It prvoides a shared algorithm for request processing, while actual work is performed by configurable delegate components. The DispatcherServlet uses Spring configuration to discover the delegate components it needs for request mapping, view resolution, exception handling, and more.</p>
<h2 id="Asynchronous-Requests"><a href="#Asynchronous-Requests" class="headerlink" title="Asynchronous Requests"></a>Asynchronous Requests</h2><p>In Servlet 3.0, you can obtain AsyncContext object by startAsync method of ServletRequest.<br>request receiver thread and request processing thread are separate. It doesn’t block the Tomcat HTTP thread.</p>
<h3 id="DeferredResult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h3><p>DeferredResult, available from Spring 3.2 onwards, assists in offloading a long-running computation from an http-worker thread to a separate thread. It can retrieve result from different thread. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingRESTController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/blocking-request&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> ResponseEntity &lt; ? &gt; blockHttpRequest() <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">  Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">  <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>=&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredResultController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DeferredResultController.class);</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/asynchronous-request&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> DeferredResult &lt; ResponseEntity &lt; ? &gt;&gt; asynchronousRequestProcessing(<span class="keyword">final</span> Model model) &#123;</span><br><span class="line"></span><br><span class="line">  LOGGER.info(<span class="string">&quot;Started processing asynchronous request&quot;</span>);</span><br><span class="line">  <span class="keyword">final</span> DeferredResult &lt; ResponseEntity &lt; ? &gt;&gt; deferredResult = <span class="keyword">new</span> DeferredResult &lt; &gt; ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Section to simulate slow running thread blocking process</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">  forkJoinPool.submit(() -&gt; &#123;</span><br><span class="line">   LOGGER.info(<span class="string">&quot;Processing request in new thread&quot;</span>);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;InterruptedException while executing the thread &#123;&#125;&quot;</span>, e.fillInStackTrace());</span><br><span class="line">   &#125;</span><br><span class="line">   deferredResult.setResult(ResponseEntity.ok(<span class="string">&quot;OK&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deferredResult;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... INFO 11879 --- [nio-8080-exec-1] c.j.d.DeferredResultController           : Started processing asynchronous request</span><br><span class="line">... INFO 11879 --- [nio-8080-exec-1] c.j.d.DeferredResultController           : HTTP Wroker thread is relased.</span><br><span class="line">...  INFO 11879 --- [Pool-1-worker-1] c.j.d.DeferredResultController           : Processing request in new thread</span><br></pre></td></tr></table></figure>

<p>*Callable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">processUpload</span><span class="params">(<span class="keyword">final</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;someView&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h2><p>实现ServletContextListener接口，向ServletContext中添加任意的对象。</p>
<p>ServletContextListener中的核心逻辑便是初始化WebApplicationContext实例并存放至ServletContext中。</p>
<ul>
<li><p>初始化</p>
<ul>
<li>Servlet container load servlet class</li>
<li>Servlet container creates a ServletConfig对象</li>
<li>Servlet container creates a servlet 对象</li>
<li>Servlet cotnainer call init method</li>
</ul>
</li>
<li><p>运行阶段</p>
<ul>
<li>servlet container会创建ServletRequest和ServletResponse对象，然后调用service方法。</li>
</ul>
</li>
<li><p>销毁阶段</p>
<ul>
<li>servlet container会invoke servlet对象的destroy方法。然后再销毁servlet对象。destroy方法里可以关闭数据库链接等等</li>
</ul>
</li>
</ul>
<h2 id="Handler-Methods"><a href="#Handler-Methods" class="headerlink" title="Handler Methods"></a>Handler Methods</h2><p><code>https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-methods</code></p>
<p>@RequestMapping handler methods have a flexible signature and can choose from a range of supported controller method arguments and return values.</p>
<p>For access to the HTTP request body. Body content is converted to the declared method argument type by using HttpMessageConverter implementations. See @RequestBody.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookie)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host                    localhost:8080</span><br><span class="line">Accept                  text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9</span><br><span class="line">Accept-Language         fr,en-gb;q&#x3D;0.7,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String encoding, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestHeader(&quot;Keep-Alive&quot;)</span> <span class="keyword">long</span> keepAlive)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When an @RequestHeader annotation is used on a Map&lt;String, String&gt;, MultiValueMap&lt;String, String&gt;, or HttpHeaders argument, the map is populated with all header values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(path = &quot;/pets&quot;, consumes = &quot;application/json&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPet</span><span class="params">(<span class="meta">@RequestBody</span> Pet pet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat Architecture</title>
    <url>/2019/07/16/Tomcat-Architecture/</url>
    <content><![CDATA[<h1 id="1-A-heigh-level-Architecture"><a href="#1-A-heigh-level-Architecture" class="headerlink" title="1. A heigh-level Architecture"></a>1. A heigh-level Architecture</h1><p>One basic functionality of the server is receiving requests from client, analyzing the requests, running busines logic and returning the result to the client.</p>
<img src="/2019/07/16/Tomcat-Architecture/simple-server.png" class="" title="simple server">

<p>start() method starts server, opens socket, listens on port number, processes requests and responds to client. And stop() method stops the server and releses the resources.</p>
<a id="more"></a>
<h2 id="Componets"><a href="#Componets" class="headerlink" title="Componets"></a>Componets</h2><h3 id="Connector-and-Container"><a href="#Connector-and-Container" class="headerlink" title="Connector and Container"></a>Connector and Container</h3><p>We realize that the scalalibility is not good if we put listening functionality and processing logic together. For example, we want to support mutliple network protocol but the processing logic is identical. Tomcat supports either HTTP protocol or AJP.</p>
<p>Now we separate network protocol and business logic.</p>
<img src="/2019/07/16/Tomcat-Architecture/server2.png" class="">

<p>One server can include multiple Connector and Container. Connector listens on requests and responses data. Container takes care of processing requests. </p>
<p>There is one disadvantage of this design. How do we map connector to container.</p>
<img src="/2019/07/16/Tomcat-Architecture/server3.png" class="">

<p>One Server includes multiple Service. A Service associates one or more Connectors to a Engine. Thus, requests comming to the Connectors will be handled by the Container.</p>
<p>We rename Containe to Engine.</p>
<h3 id="Container-design"><a href="#Container-design" class="headerlink" title="Container design"></a>Container design</h3><p>We have decoupled network protocol and container. Application server is used to deploy Web application. So Engine needs to manage multiple web application. When it receives a request, it needs to find an appropriate web application to handle this request.</p>
<img src="/2019/07/16/Tomcat-Architecture/server4.png" class="" title="simple server 4">

<p>We use Context to represent a Web application. One Engine can include multiple Context.</p>
<p>Next, we want to support virtual host. So we add Host between Engine and Context.</p>
<p>As we know that one Web application can contain mutltiple Servlet instances. So, we add Wrapper to represent servlet.</p>
<img src="/2019/07/16/Tomcat-Architecture/server5.png" class="" title="simple server 5">

<p>Tomcat refers to Engine, Host, Context, and Cluster, as container. The highest-level is Engine; while the lowest-level is Context. Certain components, such as Realm and Valve, can be placed in a container.</p>
<img src="/2019/07/16/Tomcat-Architecture/server6.png" class="" title="simple server 6">

<h3 id="Init-Flow"><a href="#Init-Flow" class="headerlink" title="Init Flow"></a>Init Flow</h3><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>Bootstrap.init() method: Initalize class loader and create Catalina object and assign it to a class private attribute</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object catalinaDaemon</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">initClassLoaders();</span><br><span class="line">Class&lt;?&gt; startupClass = catalinaLoader.loadClass(<span class="string">&quot;org.apache.catalina.startup.Catalina&quot;</span>);</span><br><span class="line">Object startupInstance = startupClass.getConstructor().newInstance();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">catalinaDaemon = startupInstance;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...<span class="keyword">if</span> (command.equals(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">               daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">               daemon.load(args);</span><br><span class="line">               daemon.start();</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                   System.exit(<span class="number">1</span>);</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>

<p>Bootstrap.load(args): Use reflection to call load method of Catalina object. Catalina object is created in init method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String methodName = <span class="string">&quot;load&quot;</span>;</span><br><span class="line">Method method = catalinaDaemon.getClass().getMethod(methodName, paramTypes);</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">    log.debug(<span class="string">&quot;Calling startup class &quot;</span> + method);</span><br><span class="line">method.invoke(catalinaDaemon, param);</span><br></pre></td></tr></table></figure>

<p>Same here, we call start of catalina object.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start the Catalina daemon.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception Fatal start error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</span><br><span class="line"></span><br><span class="line">    Method method = catalinaDaemon.getClass().getMethod(<span class="string">&quot;start&quot;</span>, (Class [] )<span class="keyword">null</span>);</span><br><span class="line">    method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Catalina"><a href="#Catalina" class="headerlink" title="Catalina"></a>Catalina</h4><p>Bootstrap main method call Catalina load and start method. The following is the main logic of load method.<br>As we can see, it does two things: create Digester object and invoke init method of Server.</p>
<p>Catalina.load():</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Digester digester = createStartDigester();</span><br><span class="line">inputSource.setByteStream(inputStream);</span><br><span class="line">digester.push(<span class="keyword">this</span>);</span><br><span class="line">digester.parse(inputSource);</span><br><span class="line">getServer().setCatalina(<span class="keyword">this</span>);</span><br><span class="line">getServer().init();</span><br></pre></td></tr></table></figure>

<p>Catalina.start(): It mainly starts the StandardServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getServer().start();</span><br></pre></td></tr></table></figure>

<h4 id="init-start-method"><a href="#init-start-method" class="headerlink" title="init/start method"></a>init/start method</h4><p>Now, we know Catalina class init and start the server, but we don’t find init/start method in StandardServer class, thus we know these methods are implemented in this parent class. We go to its parent’s parent’s class LifecycleBase and find init/start implementation.</p>
<p>LifecycleBase.init()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">        invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        initInternal();</span><br><span class="line">        setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        handleSubClassException(t, <span class="string">&quot;lifecycleBase.initFail&quot;</span>, toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardServer、StandardService、StandardEngine、StandardHost、StandardContext. They all implement abstract class LifecycleBase initInternal(). Similarily, there is startInternal() in start() method.</p>
<p>Let’s take a look at StandardServer class initInternal() method. Main logic is as follow:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">    services[i].init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>startInternal()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start our defined Services</span></span><br><span class="line"><span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">        services[i].start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, let’s take a look at StandardService.initInternal() and startInternal()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">           engine.init();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize any Executors</span></span><br><span class="line">       <span class="keyword">for</span> (Executor executor : findExecutors()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> JmxEnabled) &#123;</span><br><span class="line">               ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">           &#125;</span><br><span class="line">           executor.init();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize mapper listener</span></span><br><span class="line">       mapperListener.init();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize our defined Connectors</span></span><br><span class="line">       <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Connector connector : connectors) &#123;</span><br><span class="line">               connector.init();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled())</span><br><span class="line">        log.info(sm.getString(<span class="string">&quot;standardService.start.name&quot;</span>, <span class="keyword">this</span>.name));</span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Container first</span></span><br><span class="line">    <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (engine) &#123;</span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (executors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Executor executor: executors) &#123;</span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapperListener.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Connectors second</span></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Connector connector: connectors) &#123;</span><br><span class="line">            <span class="comment">// If it has already failed, don&#x27;t try and start it</span></span><br><span class="line">            <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                connector.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StandardEngine.startInternal(). start multithreaded to start child</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start our child containers, if any</span></span><br><span class="line">Container children[] = findChildren();</span><br><span class="line">List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    results.add(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>-&gt; Connector.initInternal()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Adapter adapter = <span class="keyword">null</span>;</span><br><span class="line">adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);</span><br><span class="line">protocolHandler.setAdapter(adapter);</span><br><span class="line">protocolHandler.init();</span><br></pre></td></tr></table></figure>
<p>-&gt; AbstractProtocol.init()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AbstractEndpoint&lt;S,?&gt; endpoint;</span><br><span class="line">endpoint.init();</span><br></pre></td></tr></table></figure>
<p>-&gt; AbstractEndpoint.init()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">    bindWithCleanup();</span><br><span class="line">    bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>-&gt; NioEndpoint.bind()  (template pattern)</p>
<h4 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h4><p>Lifecycle interface defines init and start methods. Also, it defines the following methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a LifecycleEvent listener to this component.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener The listener to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the life cycle listeners associated with this life cycle.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> An array containing the life cycle listeners associated with this</span></span><br><span class="line"><span class="comment"> *         life cycle. If this component has no listeners registered, a</span></span><br><span class="line"><span class="comment"> *         zero-length array is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> LifecycleListener[] findLifecycleListeners();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove a LifecycleEvent listener from this component.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener The listener to remove</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</span><br></pre></td></tr></table></figure>
<p>LifecycleListener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acknowledge the occurrence of the specified event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event LifecycleEvent that has occurred</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Observer pattern. When any events happen, listeners will get notified. Now, let’s take a look at LifecycleEvent. It encapsulates Lifecycle as event source.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct a new LifecycleEvent with the specified parameters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lifecycle Component on which this event occurred</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type Event type (required)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data Event data (if any)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lifecycle);</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The event data associated with this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The event type this instance represents.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the event data of this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the Lifecycle on which this event occurred.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Lifecycle) getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the event type of this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Remember that in startInteral method. fireLifecycelEvent is a method from LifecycleBase. setState() method basically notifies its listeners.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">       fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">       setState(LifecycleState.STARTING);</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow sub classes to fire &#123;<span class="doctag">@link</span> Lifecycle&#125; events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type  Event type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data  Data associated with event.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</span><br><span class="line">    LifecycleEvent event = <span class="keyword">new</span> LifecycleEvent(<span class="keyword">this</span>, type, data);</span><br><span class="line">    <span class="keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;</span><br><span class="line">        listener.lifecycleEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">    lifecycleListeners.add(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StandardServer-await-and-stopServer"><a href="#StandardServer-await-and-stopServer" class="headerlink" title="StandardServer.await() and stopServer()"></a>StandardServer.await() and stopServer()</h4><p>Tomcat has one user thread and five daemon threads. Once the user thread stops, the whole appliation stops.</p>
<p>In StandardServer.await(), it actaully listens on port 8005 and waiting for SHUTDOWN command. </p>
<p>Catalina has a method called stopServer. It send SHUTDOWN to the socket.</p>
<h3 id="Request-flow"><a href="#Request-flow" class="headerlink" title="Request flow"></a>Request flow</h3><h4 id="Convert-socket-to-internal-request-object"><a href="#Convert-socket-to-internal-request-object" class="headerlink" title="Convert socket to internal request object"></a>Convert socket to internal request object</h4><p>In Tomcat Catalina class, it will trigger ConnectorCreateRule class begin() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">digester.addRule(<span class="string">&quot;Server/Service/Connector&quot;</span>,</span><br><span class="line">                 <span class="keyword">new</span> ConnectorCreateRule());</span><br><span class="line">digester.addRule(<span class="string">&quot;Server/Service/Connector&quot;</span>,</span><br><span class="line">                 <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;executor&quot;</span>&#125;));</span><br><span class="line">digester.addSetNext(<span class="string">&quot;Server/Service/Connector&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;addConnector&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;org.apache.catalina.connector.Connector&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>begind() method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">Connector con = <span class="keyword">new</span> Connector(attributes.getValue(<span class="string">&quot;protocol&quot;</span>));</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>By default, attribute protocol is read from server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Connector constructor will initialize a protocolHandler instance. ProtocolHandler will initailize an Endpoint</p>
<p>In Connector class startInternal method, it calls protocolHandler start() method. Http11Protocol doesn’t have start method, so it will invoke its parent class AbstractProtocol start() method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">        getLog().info(sm.getString(<span class="string">&quot;abstractProtocolHandler.start&quot;</span>, getName()));</span><br><span class="line">        logPortOffset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    endpoint.start();</span><br><span class="line">    monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">            <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isPaused()) &#123;</span><br><span class="line">                        startAsyncTimeout();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As we see above, AbstractProtocol starts Endpoint (e.g. NioEndpoint)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start the NIO endpoint, creating acceptor, poller threads.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">        running = <span class="keyword">true</span>;</span><br><span class="line">        paused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getProcessorCache());</span><br><span class="line">        eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                        socketProperties.getEventCache());</span><br><span class="line">        nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                socketProperties.getBufferPool());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create worker collection</span></span><br><span class="line">        <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start poller threads</span></span><br><span class="line">        pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) &#123;</span><br><span class="line">            pollers[i] = <span class="keyword">new</span> Poller();</span><br><span class="line">            Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">&quot;-ClientPoller-&quot;</span>+i);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            pollerThread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startAcceptorThreads();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Endpoint starts multiple pollers thread and multiple acceptor thread. Acceptor spawns ServerSocket. And register the newly created socket to poller. It converts socket to a socketWrapper.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Registers a newly created socket with the poller.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> socket    The newly created socket</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> NioChannel socket)</span> </span>&#123;</span><br><span class="line">           socket.setPoller(<span class="keyword">this</span>);</span><br><span class="line">           NioSocketWrapper socketWrapper = <span class="keyword">new</span> NioSocketWrapper(socket, NioEndpoint.<span class="keyword">this</span>);</span><br><span class="line">           socket.setSocketWrapper(socketWrapper);</span><br><span class="line">           socketWrapper.setPoller(<span class="keyword">this</span>);</span><br><span class="line">           socketWrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">           socketWrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">           socketWrapper.setKeepAliveLeft(NioEndpoint.<span class="keyword">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">           socketWrapper.setSecure(isSSLEnabled());</span><br><span class="line">           PollerEvent r = eventCache.pop();</span><br><span class="line">           socketWrapper.interestOps(SelectionKey.OP_READ);<span class="comment">//this is what OP_REGISTER turns into.</span></span><br><span class="line">           <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">               r = <span class="keyword">new</span> PollerEvent(socket, socketWrapper, OP_REGISTER);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               r.reset(socket, socketWrapper, OP_REGISTER);</span><br><span class="line">           &#125;</span><br><span class="line">           addEvent(r);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>Now, let’s take a look at Http11Processor.service method and Http11InputBuffer.parseRequestLine() method. These two methods bacially construct a org.apache.coyote.Request object with the socket.</p>
<h4 id="Request-object-from-connector-to-Engine-Host-Context-Wrapper"><a href="#Request-object-from-connector-to-Engine-Host-Context-Wrapper" class="headerlink" title="Request object from connector to Engine, Host, Context, Wrapper"></a>Request object from connector to Engine, Host, Context, Wrapper</h4><p>In Http11Processor.service method, we have the following code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Process the request in the adapter</span></span><br><span class="line">            <span class="keyword">if</span> (getErrorState().isIoAllowed()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);</span><br><span class="line">                    getAdapter().service(request, response);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>AbstractProtocol create processor and it passes its adapter attribute to processor. See below: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Processor <span class="title">createProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Http11Processor processor = <span class="keyword">new</span> Http11Processor(<span class="keyword">this</span>, adapter);</span><br><span class="line">    <span class="keyword">return</span> processor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So, where does adapter is created for abstract protocol? It’s in Connector initInternal method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Initialize adapter</span></span><br><span class="line">adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);</span><br><span class="line">protocolHandler.setAdapter(adapter);</span><br></pre></td></tr></table></figure>

<p>Now, we knows that processor service method actually calls service method in org.apache.catalina.connector.CoyoteAdapter.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// Parse and set Catalina and configuration specific</span></span><br><span class="line">    <span class="comment">// request parameters</span></span><br><span class="line">    postParseSuccess = postParseRequest(req, request, res, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This service method convert org.apache.coyote.Request to org.apache.catalina.connector.Request. The postParseRequest method set attributes of connector.Request object. </p>
<p>Inisde CoyoteAdapter.postParseRequest method, it calls connector’s mapper class method map.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This will map the the latest version by default</span></span><br><span class="line">connector.getMapper().map(serverName, decodedURI, version, request.getMappingData());</span><br></pre></td></tr></table></figure>

<p>And map method calls internalMap method. what internalMap does is to set mappingData such as mappingData.host、mappingData.contextPath、mappingData.contexts、mappingData.wrapper</p>
<p>Next, we’ll take a look at how host, context, wrapper get loaded. As we mentioned earlier, StandardService.startInternal method calls mapperListener.start(). Let’s take a look at startInternal method of mapper listener.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">       setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">       Engine engine = service.getContainer();</span><br><span class="line">       <span class="keyword">if</span> (engine == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       findDefaultHost();</span><br><span class="line"></span><br><span class="line">       addListeners(engine);</span><br><span class="line"></span><br><span class="line">       Container[] conHosts = engine.findChildren();</span><br><span class="line">       <span class="keyword">for</span> (Container conHost : conHosts) &#123;</span><br><span class="line">           Host host = (Host) conHost;</span><br><span class="line">           <span class="keyword">if</span> (!LifecycleState.NEW.equals(host.getState())) &#123;</span><br><span class="line">               <span class="comment">// Registering the host will register the context and wrappers</span></span><br><span class="line">               registerHost(host);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>Tomcat regsiters Host, Context, Wrapper into a Mapper object. One Service has one Engine and multiple connectors. One Engine has mutliple Host. One host has multiple Context. One Context has multiple Wrapper. Tomcat’s Map mechanism maps the incoming request to the correct Wrapper.</p>
<h3 id="Pipeline-and-Valve"><a href="#Pipeline-and-Valve" class="headerlink" title="Pipeline and Valve"></a>Pipeline and Valve</h3><p>Tomcat uses Chain of Responsibility Pattern to improve compoennt flexiblility and scalability. </p>
<p>Tomcat defines a Pipeline and a Valve. Pipeline is used to construct chain of responsibility and valve represents processor on its chain.</p>
<img src="/2019/07/16/Tomcat-Architecture/pipeline.png" class="" title="pipeline">


<p>After Tomcat’s Connector converts Request, it will handle the request to Engine’s Pipeline and Valve. Request in Engine’s Pipeline will be delivered to Host Pipeline, etc.</p>
<p>Inside service method of CoyoteAdapter, there is the following invocation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connector.getService().getContainer().getPipeline().isAsyncSupported());</span><br></pre></td></tr></table></figure>
<p>There is an addValve method in StandardPipeline class. In the default constructor of StandardEngine:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new StandardEngine component with the default basic Valve.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StandardEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        pipeline.setBasic(<span class="keyword">new</span> StandardEngineValve());</span><br><span class="line">        <span class="comment">/* Set the jmvRoute using the system property jvmRoute */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            setJvmRoute(System.getProperty(<span class="string">&quot;jvmRoute&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">            log.warn(sm.getString(<span class="string">&quot;standardEngine.jvmRouteFail&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// By default, the engine will hold the reloading thread</span></span><br><span class="line">        backgroundProcessorDelay = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>StandardEngineValve’s invoke method calls StandardHost’s pipeline, and StandardContext, StandardWrapper. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">       Host host = request.getHost();</span><br><span class="line">       <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// HTTP 0.9 or HTTP 1.0 request without a host when no default host</span></span><br><span class="line">           <span class="comment">// is defined. This is handled by the CoyoteAdapter.</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">           request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">       host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Web-deployment"><a href="#Web-deployment" class="headerlink" title="Web deployment"></a>Web deployment</h3><p>There is no context configured in server.xml. How does tomcat deploy context? We all knows that Tomcat server find the context object (default: StandardContext) based on url. In Tomcat, all default container component StandardEngine, StandardHost, StandardContext, StandardWrapper inherit org.apache.catalina.core.ContainerBase. These default container component all call parent’s startInternal method in their own startInternal method.</p>
<p>startInternal method in ContainerBase:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line">      <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">          ((Lifecycle) pipeline).start();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start our thread</span></span><br><span class="line">      <span class="keyword">if</span> (backgroundProcessorDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          monitorFuture = Container.getService(ContainerBase.<span class="keyword">this</span>).getServer()</span><br><span class="line">                  .getUtilityExecutor().scheduleWithFixedDelay(</span><br><span class="line">                          <span class="keyword">new</span> ContainerBackgroundProcessorMonitor(), <span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We navigate to ContainerBackgroundProcessor class. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processChildren</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">            ClassLoader originalClassLoader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    Loader loader = ((Context) container).getLoader();</span><br><span class="line">                    <span class="comment">// Loader will be null for FailedContext instances</span></span><br><span class="line">                    <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Ensure background processing for Contexts and Wrappers</span></span><br><span class="line">                    <span class="comment">// is performed under the web app&#x27;s class loader</span></span><br><span class="line">                    originalClassLoader = ((Context) container).bind(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                container.backgroundProcess();</span><br><span class="line">                Container[] children = container.findChildren();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (children[i].getBackgroundProcessorDelay() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        processChildren(children[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(<span class="string">&quot;containerBase.backgroundProcess.error&quot;</span>), t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    ((Context) container).unbind(<span class="keyword">false</span>, originalClassLoader);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>This method call its backgroundProcess method and then process its children. The backgroundProcess in ContainerBase will fire an PERIODIC_EVENT event.</p>
<p>In Catalina class, there is one line of code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">&quot;Server/Service/Engine/&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>org.apache.catalina.startup.HostConfig is added as a listern to StandardHost.</p>
<p>In lifecycleEvent method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Process the event that has occurred</span></span><br><span class="line">       <span class="keyword">if</span> (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;</span><br><span class="line">           check();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">           beforeStart();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.START_EVENT)) &#123;</span><br><span class="line">           start();</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</span><br><span class="line">           stop();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>The check method will deploy web app.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Deploy applications for any directories or WAR files that are found</span></span><br><span class="line"><span class="comment">   * in our &quot;application root&quot; directory.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      File appBase = host.getAppBaseFile();</span><br><span class="line">      File configBase = host.getConfigBaseFile();</span><br><span class="line">      String[] filteredAppPaths = filterAppPaths(appBase.list());</span><br><span class="line">      <span class="comment">// Deploy XML descriptors from configBase</span></span><br><span class="line">      deployDescriptors(configBase, configBase.list());</span><br><span class="line">      <span class="comment">// Deploy WARs</span></span><br><span class="line">      deployWARs(appBase, filteredAppPaths);</span><br><span class="line">      <span class="comment">// Deploy expanded folders</span></span><br><span class="line">      deployDirectories(appBase, filteredAppPaths);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>Navigate into deploy methods</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(host.getConfigClass());</span><br><span class="line">LifecycleListener listener = (LifecycleListener) clazz.getConstructor().newInstance();</span><br><span class="line">context.addLifecycleListener(listener);</span><br><span class="line"></span><br><span class="line">context.setName(cn.getName());</span><br><span class="line">context.setPath(cn.getPath());</span><br><span class="line">context.setWebappVersion(cn.getVersion());</span><br><span class="line">context.setDocBase(cn.getBaseName() + <span class="string">&quot;.war&quot;</span>);</span><br><span class="line">host.addChild(context);</span><br></pre></td></tr></table></figure>

<p>host.getConfigClass returns a ContextConfig object. The addChild method will start the parameter Context object. The starting process will emit a set of events: BEFORE_INIT_EVENT、AFTER_INIT_EVENT、BEFORE_START_EVENT、CONFIGURE_START_EVENT、START_EVENT、AFTER_START_EVENT.</p>
<p>ContextConfig was added as a listener into context. So ContextConfig will be triggered.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Process the event that has occurred</span></span><br><span class="line">        <span class="keyword">if</span> (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) &#123;</span><br><span class="line">            configureStart();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</span><br><span class="line">            beforeStart();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_START_EVENT)) &#123;</span><br><span class="line">            <span class="comment">// Restore docBase for management tools</span></span><br><span class="line">            <span class="keyword">if</span> (originalDocBase != <span class="keyword">null</span>) &#123;</span><br><span class="line">                context.setDocBase(originalDocBase);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) &#123;</span><br><span class="line">            configureStop();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_DESTROY_EVENT)) &#123;</span><br><span class="line">            destroy();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>The configureStart method will parse web.xml to a webXml object to get servlet and filter configuration. And it will set context object.</p>
<p>When will Servlet, Listener, Filter get started? It’s in StandardContext.startInternal().</p>
<p>The startInternal() of StandardContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Notify our interested LifecycleListeners</span></span><br><span class="line">fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">// Configure and call application event listeners</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!listenerStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.listenerFail&quot;</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure and call application filters</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.filterFail&quot;</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load and initialize all &quot;load on startup&quot; servlets</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.servletFail&quot;</span>));</span><br><span class="line">                    ok = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>


<p>A request will call org.apache.catalina.core.StandardWrapperValve invoke method eventually. It’ll call Servlet service method.</p>
<h3 id="Connector-design"><a href="#Connector-design" class="headerlink" title="Connector design"></a>Connector design</h3><p>The responsibilities of Connector includes:</p>
<ul>
<li>Listen requests</li>
<li>Parse requests with correct protocol</li>
<li>Map requests to the correct container</li>
<li>response to client</li>
</ul>
<p>Tomcat supports HTTP and AJP. It supports mutliple I/O as well, include BIO, NIO, APR, NIO2 and HTTP/2 protocol. </p>
<img src="/2019/07/16/Tomcat-Architecture/connector.png" class="" title="connector">

<p>Http11NioProtocol represent NIO and http protocol handler. Endpoint represents different I/O. Processor represents different protocols.</p>
<p>Endpoint accepts request and asks Processor to process the requests. Processor then map the request to the correct container.</p>
<p>Tomcat uses Mapper and MapperListener tow classes. </p>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>Executor is used to maintain a thread pool.</p>
<h3 id="Bootstrap-and-Catalina"><a href="#Bootstrap-and-Catalina" class="headerlink" title="Bootstrap and Catalina"></a>Bootstrap and Catalina</h3><p>Catalina class provides a shell program. This program parse the server.xml file and start, stop application server.</p>
<p>Bootstrap is the entrance to the application server. It creates Catalina instances.</p>
<img src="/2019/07/16/Tomcat-Architecture/start.png" class="" title="start">

<h2 id="Class-loader"><a href="#Class-loader" class="headerlink" title="Class loader"></a>Class loader</h2><h3 id="J2SE-class-loader"><a href="#J2SE-class-loader" class="headerlink" title="J2SE class loader"></a>J2SE class loader</h3><p>We all knows that JVM provides three class laoders. Bootstrap class loader -&gt; Extension class loader -&gt; System class loader.</p>
<ul>
<li>Bootstrap: load JAVA_HOME/jre/lib</li>
<li>Extension: load JAVA_HOME/jre/lib/ext</li>
<li>System: load CLASSPATH or -classpath</li>
</ul>
<h3 id="Tomcat-class-loader"><a href="#Tomcat-class-loader" class="headerlink" title="Tomcat class loader"></a>Tomcat class loader</h3><p>Servlet standard requires that each web application has a independent class laoder instance.</p>
<ul>
<li>Isolation: If different web apps use different class loader, it avoids interference between dependencies.</li>
<li>Flexibility: We can restart one web app without affecting another web app.</li>
<li>Performance: One web app doesn’t need to scan other dependencies.</li>
</ul>
<img src="/2019/07/16/Tomcat-Architecture/class-loader.png" class="" title="class loader">

<ul>
<li>Common: path common.loader -&gt; CATALINA_HOME/lib. <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ClassLoader commonLoader &#x3D; null;</span><br><span class="line">commonLoader &#x3D; createClassLoader(&quot;common&quot;, null);</span><br></pre></td></tr></table></figure></li>
<li>Catalina: path server.loader</li>
<li>Shared: path shared.loader</li>
<li>Web app: load /WEB-INF/classes and /WEB-INF/lib</li>
</ul>
<h1 id="Catalina-1"><a href="#Catalina-1" class="headerlink" title="Catalina"></a>Catalina</h1><h2 id="What-is-Catalina"><a href="#What-is-Catalina" class="headerlink" title="What is Catalina"></a>What is Catalina</h2><p>Catalina includes all components mentioned earlier. It is the core of Tomcat. </p>
<h2 id="Digester"><a href="#Digester" class="headerlink" title="Digester"></a>Digester</h2><p>Catalina uses Digester to parse XML (server.xml)</p>
<h2 id="Create-Server"><a href="#Create-Server" class="headerlink" title="Create Server"></a>Create Server</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&#x27;1.0&#x27;</span> encoding=<span class="string">&#x27;utf-8&#x27;</span>?&gt;</span><br><span class="line">&lt;Server port=<span class="string">&quot;8005&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> SSLEngine=<span class="string">&quot;on&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.core.JasperListener&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.mbeans.ServerLifecycleListener&quot;</span> /&gt;</span><br><span class="line">  &lt;Listener className=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Listener className=<span class="string">&quot;com.springsource.server.web.tomcat.ServerLifecycleLoggingListener&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Service name=<span class="string">&quot;Catalina&quot;</span>&gt;</span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8080&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">               connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">           redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8443&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> SSLEnabled=<span class="string">&quot;true&quot;</span></span><br><span class="line">           maxThreads=<span class="string">&quot;150&quot;</span> scheme=<span class="string">&quot;https&quot;</span> secure=<span class="string">&quot;true&quot;</span></span><br><span class="line">           clientAuth=<span class="string">&quot;false&quot;</span> sslProtocol=<span class="string">&quot;TLS&quot;</span></span><br><span class="line">           keystoreFile=<span class="string">&quot;config/keystore&quot;</span></span><br><span class="line">           keystorePass=<span class="string">&quot;changeit&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Engine name=<span class="string">&quot;Catalina&quot;</span> defaultHost=<span class="string">&quot;localhost&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Realm className=<span class="string">&quot;org.apache.catalina.realm.JAASRealm&quot;</span> appName=<span class="string">&quot;dm-kernel&quot;</span></span><br><span class="line">         userClassNames=<span class="string">&quot;com.springsource.kernel.authentication.User&quot;</span></span><br><span class="line">         roleClassNames=<span class="string">&quot;com.springsource.kernel.authentication.Role&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span></span><br><span class="line">        unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span></span><br><span class="line">        xmlValidation=<span class="string">&quot;false&quot;</span> xmlNamespaceAware=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> </span><br><span class="line">               directory=<span class="string">&quot;serviceability/logs/access&quot;</span></span><br><span class="line">           prefix=<span class="string">&quot;localhost_access_log.&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span> pattern=<span class="string">&quot;common&quot;</span> </span><br><span class="line">               resolveHosts=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">                    </span><br><span class="line">        &lt;Valve className=<span class="string">&quot;com.springsource.server.web.tomcat.ApplicationNameTrackingValve&quot;</span>/&gt;</span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br></pre></td></tr></table></figure>

<img src="/2019/07/16/Tomcat-Architecture/catalina.png" class="" title="catalina">

<p>A Engine is the highest-level of a container. It can contains one or more Hosts. You could configure a Tomcat server to run on several hostnames, known as virtual host. The Catalina Engine receives HTTP requests from the HTTP connector, and direct them to the correct host based on the hostname/IP address in the request header.</p>
<p>A Realm is a database of user, password, and role for authentication (i.e., access control). You can define Realm for any container, such as Engine, Host, and Context, and Cluster. It uses the JNDI name UserDatabase defined in the GlobalNamingResources. Besides the UserDatabaseRealm, there are: JDBCRealm (for authenticating users to connect to a relational database via the JDBC driver); DataSourceRealm (to connect to a DataSource via JNDI; JNDIRealm (to connect to an LDAP directory); and MemoryRealm (to load an XML file in memory).</p>
<p>A Host defines a virtual host under the Engine, which can in turn support many Contexts (webapps).</p>
<p>Tomcat supports server clustering. It can replicate sessions and context attributes across the clustered server. It can also deploy a WAR-file on all the cluster.</p>
<p>A Valve can intercept HTTP requests before forwarding them to the applications, for pre-processing the requests. A Valve can be defined for any container, such as Engine, Host, and Context, and Cluster. In the default configuration, the AccessLogValve intercepts an HTTP request and creates a log entry in the log file.</p>
<h2 id="Deploy-Web"><a href="#Deploy-Web" class="headerlink" title="Deploy Web"></a>Deploy Web</h2><p>Catalina mainly uses StandardHost, HostConfig, StandardContext, ContextConfig, StandardWrapper to deploy webapp.</p>
<h2 id="Hendle-Web-Requests"><a href="#Hendle-Web-Requests" class="headerlink" title="Hendle Web Requests"></a>Hendle Web Requests</h2><p>As we mentioned, Tomcat use org.apache.tomcat.util.http.mapper.Mapper matain the association between Connector and Container (Host, Context, Wrapper). And org.apache.catalina.connector.MapperListener listens on events for container and dynamically register or remove corresponding association.</p>
<p>When connector receives a request, it reads request and invoke CoyoteAdapter.service() method.</p>
<h1 id="Coyote"><a href="#Coyote" class="headerlink" title="Coyote"></a>Coyote</h1><p>Coyote is the name of Tomcat Connector framework. It encapsulates underlying network communication(Socket). Coyote converts Socket input into Request object and gives it to Catalina container and converts response into socket output.</p>
<p>Coyote is an independent module. It has no relationship with Servlet standard. Thus, its Request and Response objects don’t implement Servlet standard.</p>
<p>Coyote supports the following three protocols in application layer:</p>
<ul>
<li>HTTP/1.1</li>
<li>AJP</li>
<li>HTTP/2.0</li>
</ul>
<p>Also, it supports the following I/O in terms of transport layer.</p>
<ul>
<li>NIO</li>
<li>NIO2</li>
<li>APR</li>
</ul>
<h2 id="Key-concepts"><a href="#Key-concepts" class="headerlink" title="Key concepts"></a>Key concepts</h2><ul>
<li>Endpoint</li>
</ul>
<p>Encapsulates Socket. Tomcat provides AbstractEndpoint and provide NioEndpoint, AprEndpoint and Nio2Endpoint three implementation.</p>
<ul>
<li>Processor</li>
</ul>
<p>Construct Request and Response object and pass them to Catalina container through Adapter. Http11Processor, AjpProcessor, Stream Preocessor.</p>
<ul>
<li>ProtocolHandler</li>
</ul>
<p>Encapsulate Endpoint and Processor. Http11NioProtocol, Http11Nio2Protocol, etc.</p>
<ul>
<li>UpgradeProtocol</li>
</ul>
<h2 id="Simplified-flow"><a href="#Simplified-flow" class="headerlink" title="Simplified flow"></a>Simplified flow</h2><p>Endpoint -&gt; Endpoint.Acceptor -&gt; SocketProcessorBase -&gt; Endpoint.Handler process(SocketWrapper) -&gt; Processor -&gt; Adapter service(request, response) -&gt; Valve</p>
<p>Connector starts Endpoint instances. Endpoint run multiple threads and each thread runs an AbstractEndpoint.Acceptor instance. Acceptr converts Socket to SocketWrapper instance and handles it to SocketProcessor. </p>
<h1 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h1><img src="/2019/07/16/Tomcat-Architecture/cluster.png" class="" title="Cluster">


<p>First, org.apache.catalina.Cluster is responsible for setting up a way to communicate within the Cluster.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
